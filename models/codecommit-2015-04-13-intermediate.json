{
  "metadata" : {
    "apiVersion" : "2015-04-13",
    "exceptionUnmarshallerImpl" : null,
    "protocol" : "json",
    "checksumFormat" : null,
    "documentation" : "<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the AWS CodeCommit API.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <ul> <li>Repositories</li> <li>Branches</li> <li>Commits</li> </ul> <p>For information about how to use AWS CodeCommit, see the <i>AWS CodeCommit User Guide</i>.</p>",
    "defaultEndpoint" : "https://codecommit.us-east-1.amazonaws.com",
    "defaultEndpointWithoutHttpProtocol" : "codecommit.us-east-1.amazonaws.com",
    "syncInterface" : "AWSCodeCommit",
    "syncClient" : "AWSCodeCommitClient",
    "asyncInterface" : "AWSCodeCommitAsync",
    "asyncClient" : "AWSCodeCommitAsyncClient",
    "packageName" : "com.amazonaws.services.codecommit",
    "packagePath" : "com/amazonaws/services/codecommit",
    "serviceAbbreviation" : "CodeCommit",
    "serviceFullName" : "AWS CodeCommit",
    "hasApiWithStreamInput" : false,
    "jsonContentVersion" : "application/x-amz-json-1.1",
    "endpointPrefix" : "codecommit",
    "signingName" : "codecommit",
    "serviceName" : "CodeCommit",
    "jsonProtocol" : true,
    "unmarshallerContextClassName" : "JsonUnmarshallerContext",
    "unmarshallerClassSuffix" : "JsonUnmarshaller",
    "protocolDefaultExceptionUnmarshallerType" : "JsonErrorUnmarshaller"
  },
  "operations" : {
    "BatchGetRepositories" : {
      "documentation" : "<p>Gets information about one or more repositories.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>",
      "operationName" : "BatchGetRepositories",
      "deprecated" : false,
      "input" : {
        "variableName" : "batchGetRepositoriesRequest",
        "variableType" : "BatchGetRepositoriesRequest",
        "variableDeclarationType" : "BatchGetRepositoriesRequest",
        "documentation" : "<p>Represents the input of a batch get repositories operation.</p>",
        "simpleType" : "BatchGetRepositoriesRequest",
        "variableSetterType" : "BatchGetRepositoriesRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : {
        "returnType" : "BatchGetRepositoriesResult",
        "documentation" : "<p>Represents the output of a batch get repositories operation.</p>"
      },
      "exceptions" : [ {
        "exceptionName" : "RepositoryNamesRequiredException",
        "documentation" : "<p>A repository names object is required but was not specified.</p>"
      }, {
        "exceptionName" : "MaximumRepositoryNamesExceededException",
        "documentation" : "<p>The maximum number of allowed repository names was exceeded. Currently, this number is 25.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Gets information about one or more repositories.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param batchGetRepositoriesRequest Represents the input of a batch get repositories operation.\n@return Result of the BatchGetRepositories operation returned by the service.\n@throws RepositoryNamesRequiredException A repository names object is required but was not specified.\n@throws MaximumRepositoryNamesExceededException The maximum number of allowed repository names was exceeded. Currently, this number is 25.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Gets information about one or more repositories.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param batchGetRepositoriesRequest Represents the input of a batch get repositories operation.\n@return A Java Future containing the result of the BatchGetRepositories operation returned by the service.*/",
      "asyncDocumentationWithHandler" : "/**<p>Gets information about one or more repositories.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param batchGetRepositoriesRequest Represents the input of a batch get repositories operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.\n@return A Java Future containing the result of the BatchGetRepositories operation returned by the service.*/",
      "syncReturnType" : "BatchGetRepositoriesResult",
      "asyncReturnType" : "BatchGetRepositoriesResult",
      "asyncFutureType" : "java.util.concurrent.Future<BatchGetRepositoriesResult>",
      "asyncCallableType" : "java.util.concurrent.Callable<BatchGetRepositoriesResult>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<BatchGetRepositoriesRequest, BatchGetRepositoriesResult>",
      "methodName" : "batchGetRepositories"
    },
    "CreateBranch" : {
      "documentation" : "<p>Creates a new branch in a repository and points the branch to a commit.</p> <note>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</note>",
      "operationName" : "CreateBranch",
      "deprecated" : false,
      "input" : {
        "variableName" : "createBranchRequest",
        "variableType" : "CreateBranchRequest",
        "variableDeclarationType" : "CreateBranchRequest",
        "documentation" : "<p>Represents the input of a create branch operation.</p>",
        "simpleType" : "CreateBranchRequest",
        "variableSetterType" : "CreateBranchRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : null,
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "RepositoryDoesNotExistException",
        "documentation" : "<p>The specified repository does not exist.</p>"
      }, {
        "exceptionName" : "BranchNameRequiredException",
        "documentation" : "<p>A branch name is required but was not specified.</p>"
      }, {
        "exceptionName" : "BranchNameExistsException",
        "documentation" : "<p>The specified branch name already exists.</p>"
      }, {
        "exceptionName" : "InvalidBranchNameException",
        "documentation" : "<p>The specified branch name is not valid.</p>"
      }, {
        "exceptionName" : "CommitIdRequiredException",
        "documentation" : "<p>A commit ID was not specified.</p>"
      }, {
        "exceptionName" : "CommitDoesNotExistException",
        "documentation" : "<p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>"
      }, {
        "exceptionName" : "InvalidCommitIdException",
        "documentation" : "<p>The specified commit ID is not valid.</p>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Creates a new branch in a repository and points the branch to a commit.</p> <note>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</note>\n@param createBranchRequest Represents the input of a create branch operation.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws RepositoryDoesNotExistException The specified repository does not exist.\n@throws BranchNameRequiredException A branch name is required but was not specified.\n@throws BranchNameExistsException The specified branch name already exists.\n@throws InvalidBranchNameException The specified branch name is not valid.\n@throws CommitIdRequiredException A commit ID was not specified.\n@throws CommitDoesNotExistException The specified commit does not exist or no commit was specified, and the specified repository has no default branch.\n@throws InvalidCommitIdException The specified commit ID is not valid.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Creates a new branch in a repository and points the branch to a commit.</p> <note>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</note>\n@param createBranchRequest Represents the input of a create branch operation.*/",
      "asyncDocumentationWithHandler" : "/**<p>Creates a new branch in a repository and points the branch to a commit.</p> <note>Calling the create branch operation does not set a repository's default branch. To do this, call the update default branch operation.</note>\n@param createBranchRequest Represents the input of a create branch operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.*/",
      "syncReturnType" : "void",
      "asyncReturnType" : "Void",
      "asyncFutureType" : "java.util.concurrent.Future<Void>",
      "asyncCallableType" : "java.util.concurrent.Callable<Void>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<CreateBranchRequest, Void>",
      "methodName" : "createBranch"
    },
    "CreateRepository" : {
      "documentation" : "<p>Creates a new, empty repository.</p>",
      "operationName" : "CreateRepository",
      "deprecated" : false,
      "input" : {
        "variableName" : "createRepositoryRequest",
        "variableType" : "CreateRepositoryRequest",
        "variableDeclarationType" : "CreateRepositoryRequest",
        "documentation" : "<p>Represents the input of a create repository operation.</p>",
        "simpleType" : "CreateRepositoryRequest",
        "variableSetterType" : "CreateRepositoryRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : {
        "returnType" : "CreateRepositoryResult",
        "documentation" : "<p>Represents the output of a create repository operation.</p>"
      },
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameExistsException",
        "documentation" : "<p>The specified repository name already exists.</p>"
      }, {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "InvalidRepositoryDescriptionException",
        "documentation" : "<p>The specified repository description is not valid.</p>"
      }, {
        "exceptionName" : "RepositoryLimitExceededException",
        "documentation" : "<p>A repository resource limit was exceeded.</p>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Creates a new, empty repository.</p>\n@param createRepositoryRequest Represents the input of a create repository operation.\n@return Result of the CreateRepository operation returned by the service.\n@throws RepositoryNameExistsException The specified repository name already exists.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws InvalidRepositoryDescriptionException The specified repository description is not valid.\n@throws RepositoryLimitExceededException A repository resource limit was exceeded.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Creates a new, empty repository.</p>\n@param createRepositoryRequest Represents the input of a create repository operation.\n@return A Java Future containing the result of the CreateRepository operation returned by the service.*/",
      "asyncDocumentationWithHandler" : "/**<p>Creates a new, empty repository.</p>\n@param createRepositoryRequest Represents the input of a create repository operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.\n@return A Java Future containing the result of the CreateRepository operation returned by the service.*/",
      "syncReturnType" : "CreateRepositoryResult",
      "asyncReturnType" : "CreateRepositoryResult",
      "asyncFutureType" : "java.util.concurrent.Future<CreateRepositoryResult>",
      "asyncCallableType" : "java.util.concurrent.Callable<CreateRepositoryResult>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<CreateRepositoryRequest, CreateRepositoryResult>",
      "methodName" : "createRepository"
    },
    "DeleteRepository" : {
      "documentation" : "<p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p> <important>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</important>",
      "operationName" : "DeleteRepository",
      "deprecated" : false,
      "input" : {
        "variableName" : "deleteRepositoryRequest",
        "variableType" : "DeleteRepositoryRequest",
        "variableDeclarationType" : "DeleteRepositoryRequest",
        "documentation" : "<p>Represents the input of a delete repository operation.</p>",
        "simpleType" : "DeleteRepositoryRequest",
        "variableSetterType" : "DeleteRepositoryRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : {
        "returnType" : "DeleteRepositoryResult",
        "documentation" : "<p>Represents the output of a delete repository operation.</p>"
      },
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p> <important>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</important>\n@param deleteRepositoryRequest Represents the input of a delete repository operation.\n@return Result of the DeleteRepository operation returned by the service.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p> <important>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</important>\n@param deleteRepositoryRequest Represents the input of a delete repository operation.\n@return A Java Future containing the result of the DeleteRepository operation returned by the service.*/",
      "asyncDocumentationWithHandler" : "/**<p>Deletes a repository. If a specified repository was already deleted, a null repository ID will be returned.</p> <important>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository will fail.</important>\n@param deleteRepositoryRequest Represents the input of a delete repository operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.\n@return A Java Future containing the result of the DeleteRepository operation returned by the service.*/",
      "syncReturnType" : "DeleteRepositoryResult",
      "asyncReturnType" : "DeleteRepositoryResult",
      "asyncFutureType" : "java.util.concurrent.Future<DeleteRepositoryResult>",
      "asyncCallableType" : "java.util.concurrent.Callable<DeleteRepositoryResult>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<DeleteRepositoryRequest, DeleteRepositoryResult>",
      "methodName" : "deleteRepository"
    },
    "GetBranch" : {
      "documentation" : "<p>Retrieves information about a repository branch, including its name and the last commit ID.</p>",
      "operationName" : "GetBranch",
      "deprecated" : false,
      "input" : {
        "variableName" : "getBranchRequest",
        "variableType" : "GetBranchRequest",
        "variableDeclarationType" : "GetBranchRequest",
        "documentation" : "<p>Represents the input of a get branch operation.</p>",
        "simpleType" : "GetBranchRequest",
        "variableSetterType" : "GetBranchRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : {
        "returnType" : "GetBranchResult",
        "documentation" : "<p>Represents the output of a get branch operation.</p>"
      },
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "RepositoryDoesNotExistException",
        "documentation" : "<p>The specified repository does not exist.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "BranchNameRequiredException",
        "documentation" : "<p>A branch name is required but was not specified.</p>"
      }, {
        "exceptionName" : "InvalidBranchNameException",
        "documentation" : "<p>The specified branch name is not valid.</p>"
      }, {
        "exceptionName" : "BranchDoesNotExistException",
        "documentation" : "<p>The specified branch does not exist.</p>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Retrieves information about a repository branch, including its name and the last commit ID.</p>\n@param getBranchRequest Represents the input of a get branch operation.\n@return Result of the GetBranch operation returned by the service.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws RepositoryDoesNotExistException The specified repository does not exist.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws BranchNameRequiredException A branch name is required but was not specified.\n@throws InvalidBranchNameException The specified branch name is not valid.\n@throws BranchDoesNotExistException The specified branch does not exist.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Retrieves information about a repository branch, including its name and the last commit ID.</p>\n@param getBranchRequest Represents the input of a get branch operation.\n@return A Java Future containing the result of the GetBranch operation returned by the service.*/",
      "asyncDocumentationWithHandler" : "/**<p>Retrieves information about a repository branch, including its name and the last commit ID.</p>\n@param getBranchRequest Represents the input of a get branch operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.\n@return A Java Future containing the result of the GetBranch operation returned by the service.*/",
      "syncReturnType" : "GetBranchResult",
      "asyncReturnType" : "GetBranchResult",
      "asyncFutureType" : "java.util.concurrent.Future<GetBranchResult>",
      "asyncCallableType" : "java.util.concurrent.Callable<GetBranchResult>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<GetBranchRequest, GetBranchResult>",
      "methodName" : "getBranch"
    },
    "GetRepository" : {
      "documentation" : "<p>Gets information about a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>",
      "operationName" : "GetRepository",
      "deprecated" : false,
      "input" : {
        "variableName" : "getRepositoryRequest",
        "variableType" : "GetRepositoryRequest",
        "variableDeclarationType" : "GetRepositoryRequest",
        "documentation" : "<p>Represents the input of a get repository operation.</p>",
        "simpleType" : "GetRepositoryRequest",
        "variableSetterType" : "GetRepositoryRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : {
        "returnType" : "GetRepositoryResult",
        "documentation" : "<p>Represents the output of a get repository operation.</p>"
      },
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "RepositoryDoesNotExistException",
        "documentation" : "<p>The specified repository does not exist.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Gets information about a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param getRepositoryRequest Represents the input of a get repository operation.\n@return Result of the GetRepository operation returned by the service.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws RepositoryDoesNotExistException The specified repository does not exist.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Gets information about a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param getRepositoryRequest Represents the input of a get repository operation.\n@return A Java Future containing the result of the GetRepository operation returned by the service.*/",
      "asyncDocumentationWithHandler" : "/**<p>Gets information about a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param getRepositoryRequest Represents the input of a get repository operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.\n@return A Java Future containing the result of the GetRepository operation returned by the service.*/",
      "syncReturnType" : "GetRepositoryResult",
      "asyncReturnType" : "GetRepositoryResult",
      "asyncFutureType" : "java.util.concurrent.Future<GetRepositoryResult>",
      "asyncCallableType" : "java.util.concurrent.Callable<GetRepositoryResult>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<GetRepositoryRequest, GetRepositoryResult>",
      "methodName" : "getRepository"
    },
    "ListBranches" : {
      "documentation" : "<p>Gets information about one or more branches in a repository.</p>",
      "operationName" : "ListBranches",
      "deprecated" : false,
      "input" : {
        "variableName" : "listBranchesRequest",
        "variableType" : "ListBranchesRequest",
        "variableDeclarationType" : "ListBranchesRequest",
        "documentation" : "<p>Represents the input of a list branches operation.</p>",
        "simpleType" : "ListBranchesRequest",
        "variableSetterType" : "ListBranchesRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : {
        "returnType" : "ListBranchesResult",
        "documentation" : "<p>Represents the output of a list branches operation.</p>"
      },
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "RepositoryDoesNotExistException",
        "documentation" : "<p>The specified repository does not exist.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      }, {
        "exceptionName" : "InvalidContinuationTokenException",
        "documentation" : "<p>The specified continuation token is not valid.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Gets information about one or more branches in a repository.</p>\n@param listBranchesRequest Represents the input of a list branches operation.\n@return Result of the ListBranches operation returned by the service.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws RepositoryDoesNotExistException The specified repository does not exist.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.\n@throws InvalidContinuationTokenException The specified continuation token is not valid.*/",
      "asyncDocumentation" : "/**<p>Gets information about one or more branches in a repository.</p>\n@param listBranchesRequest Represents the input of a list branches operation.\n@return A Java Future containing the result of the ListBranches operation returned by the service.*/",
      "asyncDocumentationWithHandler" : "/**<p>Gets information about one or more branches in a repository.</p>\n@param listBranchesRequest Represents the input of a list branches operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.\n@return A Java Future containing the result of the ListBranches operation returned by the service.*/",
      "syncReturnType" : "ListBranchesResult",
      "asyncReturnType" : "ListBranchesResult",
      "asyncFutureType" : "java.util.concurrent.Future<ListBranchesResult>",
      "asyncCallableType" : "java.util.concurrent.Callable<ListBranchesResult>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<ListBranchesRequest, ListBranchesResult>",
      "methodName" : "listBranches"
    },
    "ListRepositories" : {
      "documentation" : "<p>Gets information about one or more repositories.</p>",
      "operationName" : "ListRepositories",
      "deprecated" : false,
      "input" : {
        "variableName" : "listRepositoriesRequest",
        "variableType" : "ListRepositoriesRequest",
        "variableDeclarationType" : "ListRepositoriesRequest",
        "documentation" : "<p>Represents the input of a list repositories operation.</p>",
        "simpleType" : "ListRepositoriesRequest",
        "variableSetterType" : "ListRepositoriesRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : {
        "returnType" : "ListRepositoriesResult",
        "documentation" : "<p>Represents the output of a list repositories operation.</p>"
      },
      "exceptions" : [ {
        "exceptionName" : "InvalidSortByException",
        "documentation" : "<p>The specified sort by value is not valid.</p>"
      }, {
        "exceptionName" : "InvalidOrderException",
        "documentation" : "<p>The specified sort order is not valid.</p>"
      }, {
        "exceptionName" : "InvalidContinuationTokenException",
        "documentation" : "<p>The specified continuation token is not valid.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Gets information about one or more repositories.</p>\n@param listRepositoriesRequest Represents the input of a list repositories operation.\n@return Result of the ListRepositories operation returned by the service.\n@throws InvalidSortByException The specified sort by value is not valid.\n@throws InvalidOrderException The specified sort order is not valid.\n@throws InvalidContinuationTokenException The specified continuation token is not valid.*/",
      "asyncDocumentation" : "/**<p>Gets information about one or more repositories.</p>\n@param listRepositoriesRequest Represents the input of a list repositories operation.\n@return A Java Future containing the result of the ListRepositories operation returned by the service.*/",
      "asyncDocumentationWithHandler" : "/**<p>Gets information about one or more repositories.</p>\n@param listRepositoriesRequest Represents the input of a list repositories operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.\n@return A Java Future containing the result of the ListRepositories operation returned by the service.*/",
      "syncReturnType" : "ListRepositoriesResult",
      "asyncReturnType" : "ListRepositoriesResult",
      "asyncFutureType" : "java.util.concurrent.Future<ListRepositoriesResult>",
      "asyncCallableType" : "java.util.concurrent.Callable<ListRepositoriesResult>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<ListRepositoriesRequest, ListRepositoriesResult>",
      "methodName" : "listRepositories"
    },
    "UpdateDefaultBranch" : {
      "documentation" : "<p>Sets or changes the default branch name for the specified repository.</p> <note>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</note>",
      "operationName" : "UpdateDefaultBranch",
      "deprecated" : false,
      "input" : {
        "variableName" : "updateDefaultBranchRequest",
        "variableType" : "UpdateDefaultBranchRequest",
        "variableDeclarationType" : "UpdateDefaultBranchRequest",
        "documentation" : "<p>Represents the input of an update default branch operation.</p>",
        "simpleType" : "UpdateDefaultBranchRequest",
        "variableSetterType" : "UpdateDefaultBranchRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : null,
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "RepositoryDoesNotExistException",
        "documentation" : "<p>The specified repository does not exist.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "BranchNameRequiredException",
        "documentation" : "<p>A branch name is required but was not specified.</p>"
      }, {
        "exceptionName" : "InvalidBranchNameException",
        "documentation" : "<p>The specified branch name is not valid.</p>"
      }, {
        "exceptionName" : "BranchDoesNotExistException",
        "documentation" : "<p>The specified branch does not exist.</p>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Sets or changes the default branch name for the specified repository.</p> <note>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</note>\n@param updateDefaultBranchRequest Represents the input of an update default branch operation.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws RepositoryDoesNotExistException The specified repository does not exist.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws BranchNameRequiredException A branch name is required but was not specified.\n@throws InvalidBranchNameException The specified branch name is not valid.\n@throws BranchDoesNotExistException The specified branch does not exist.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Sets or changes the default branch name for the specified repository.</p> <note>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</note>\n@param updateDefaultBranchRequest Represents the input of an update default branch operation.*/",
      "asyncDocumentationWithHandler" : "/**<p>Sets or changes the default branch name for the specified repository.</p> <note>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</note>\n@param updateDefaultBranchRequest Represents the input of an update default branch operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.*/",
      "syncReturnType" : "void",
      "asyncReturnType" : "Void",
      "asyncFutureType" : "java.util.concurrent.Future<Void>",
      "asyncCallableType" : "java.util.concurrent.Callable<Void>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<UpdateDefaultBranchRequest, Void>",
      "methodName" : "updateDefaultBranch"
    },
    "UpdateRepositoryDescription" : {
      "documentation" : "<p>Sets or changes the comment or description for a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>",
      "operationName" : "UpdateRepositoryDescription",
      "deprecated" : false,
      "input" : {
        "variableName" : "updateRepositoryDescriptionRequest",
        "variableType" : "UpdateRepositoryDescriptionRequest",
        "variableDeclarationType" : "UpdateRepositoryDescriptionRequest",
        "documentation" : "<p>Represents the input of an update repository description operation.</p>",
        "simpleType" : "UpdateRepositoryDescriptionRequest",
        "variableSetterType" : "UpdateRepositoryDescriptionRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : null,
      "exceptions" : [ {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "RepositoryDoesNotExistException",
        "documentation" : "<p>The specified repository does not exist.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      }, {
        "exceptionName" : "InvalidRepositoryDescriptionException",
        "documentation" : "<p>The specified repository description is not valid.</p>"
      }, {
        "exceptionName" : "EncryptionIntegrityChecksFailedException",
        "documentation" : "<p>An encryption integrity check failed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyAccessDeniedException",
        "documentation" : "<p>An encryption key could not be accessed.</p>"
      }, {
        "exceptionName" : "EncryptionKeyDisabledException",
        "documentation" : "<p>The encryption key is disabled.</p>"
      }, {
        "exceptionName" : "EncryptionKeyNotFoundException",
        "documentation" : "<p>No encryption key was found.</p>"
      }, {
        "exceptionName" : "EncryptionKeyUnavailableException",
        "documentation" : "<p>The encryption key is not available.</p>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Sets or changes the comment or description for a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param updateRepositoryDescriptionRequest Represents the input of an update repository description operation.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws RepositoryDoesNotExistException The specified repository does not exist.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.\n@throws InvalidRepositoryDescriptionException The specified repository description is not valid.\n@throws EncryptionIntegrityChecksFailedException An encryption integrity check failed.\n@throws EncryptionKeyAccessDeniedException An encryption key could not be accessed.\n@throws EncryptionKeyDisabledException The encryption key is disabled.\n@throws EncryptionKeyNotFoundException No encryption key was found.\n@throws EncryptionKeyUnavailableException The encryption key is not available.*/",
      "asyncDocumentation" : "/**<p>Sets or changes the comment or description for a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param updateRepositoryDescriptionRequest Represents the input of an update repository description operation.*/",
      "asyncDocumentationWithHandler" : "/**<p>Sets or changes the comment or description for a repository.</p> <note><p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a web page could expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a web page.</p></note>\n@param updateRepositoryDescriptionRequest Represents the input of an update repository description operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.*/",
      "syncReturnType" : "void",
      "asyncReturnType" : "Void",
      "asyncFutureType" : "java.util.concurrent.Future<Void>",
      "asyncCallableType" : "java.util.concurrent.Callable<Void>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<UpdateRepositoryDescriptionRequest, Void>",
      "methodName" : "updateRepositoryDescription"
    },
    "UpdateRepositoryName" : {
      "documentation" : "<p>Renames a repository.</p>",
      "operationName" : "UpdateRepositoryName",
      "deprecated" : false,
      "input" : {
        "variableName" : "updateRepositoryNameRequest",
        "variableType" : "UpdateRepositoryNameRequest",
        "variableDeclarationType" : "UpdateRepositoryNameRequest",
        "documentation" : "<p>Represents the input of an update repository description operation.</p>",
        "simpleType" : "UpdateRepositoryNameRequest",
        "variableSetterType" : "UpdateRepositoryNameRequest"
      },
      "inputStreamPropertyName" : null,
      "returnType" : null,
      "exceptions" : [ {
        "exceptionName" : "RepositoryDoesNotExistException",
        "documentation" : "<p>The specified repository does not exist.</p>"
      }, {
        "exceptionName" : "RepositoryNameExistsException",
        "documentation" : "<p>The specified repository name already exists.</p>"
      }, {
        "exceptionName" : "RepositoryNameRequiredException",
        "documentation" : "<p>A repository name is required but was not specified.</p>"
      }, {
        "exceptionName" : "InvalidRepositoryNameException",
        "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>"
      } ],
      "hasBlobMemberAsPayload" : false,
      "syncDocumentation" : "/**<p>Renames a repository.</p>\n@param updateRepositoryNameRequest Represents the input of an update repository description operation.\n@throws RepositoryDoesNotExistException The specified repository does not exist.\n@throws RepositoryNameExistsException The specified repository name already exists.\n@throws RepositoryNameRequiredException A repository name is required but was not specified.\n@throws InvalidRepositoryNameException At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.*/",
      "asyncDocumentation" : "/**<p>Renames a repository.</p>\n@param updateRepositoryNameRequest Represents the input of an update repository description operation.*/",
      "asyncDocumentationWithHandler" : "/**<p>Renames a repository.</p>\n@param updateRepositoryNameRequest Represents the input of an update repository description operation.\n@param asyncHandler Asynchronous callback handler for events in the lifecycle of the request. Users can provide an implementation of the callback methods in this interface to receive notification of successful or unsuccessful completion of the operation.*/",
      "syncReturnType" : "void",
      "asyncReturnType" : "Void",
      "asyncFutureType" : "java.util.concurrent.Future<Void>",
      "asyncCallableType" : "java.util.concurrent.Callable<Void>",
      "asyncHandlerType" : "com.amazonaws.handlers.AsyncHandler<UpdateRepositoryNameRequest, Void>",
      "methodName" : "updateRepositoryName"
    }
  },
  "shapes" : {
    "RepositoryMetadata" : {
      "c2jName" : "RepositoryMetadata",
      "documentation" : "<p>Information about a repository.</p>",
      "shapeName" : "RepositoryMetadata",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The ID of the AWS account associated with the repository.</p>",
        "name" : "AccountId",
        "c2jName" : "accountId",
        "c2jShape" : "AccountId",
        "variable" : {
          "variableName" : "accountId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The ID of the AWS account associated with the repository.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "accountId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "accountId",
          "marshallLocationName" : "accountId",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@param accountId The ID of the AWS account associated with the repository.*/",
        "getterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@return The ID of the AWS account associated with the repository.*/",
        "fluentSetterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@param accountId The ID of the AWS account associated with the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@param accountId The ID of the AWS account associated with the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The ID of the repository.</p>",
        "name" : "RepositoryId",
        "c2jName" : "repositoryId",
        "c2jShape" : "RepositoryId",
        "variable" : {
          "variableName" : "repositoryId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The ID of the repository.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryId",
          "marshallLocationName" : "repositoryId",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The ID of the repository.</p>\n@param repositoryId The ID of the repository.*/",
        "getterDocumentation" : "/**<p>The ID of the repository.</p>\n@return The ID of the repository.*/",
        "fluentSetterDocumentation" : "/**<p>The ID of the repository.</p>\n@param repositoryId The ID of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The ID of the repository.</p>\n@param repositoryId The ID of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The repository's name.</p>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The repository's name.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The repository's name.</p>\n@param repositoryName The repository's name.*/",
        "getterDocumentation" : "/**<p>The repository's name.</p>\n@return The repository's name.*/",
        "fluentSetterDocumentation" : "/**<p>The repository's name.</p>\n@param repositoryName The repository's name.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The repository's name.</p>\n@param repositoryName The repository's name.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>A comment or description about the repository.</p>",
        "name" : "RepositoryDescription",
        "c2jName" : "repositoryDescription",
        "c2jShape" : "RepositoryDescription",
        "variable" : {
          "variableName" : "repositoryDescription",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>A comment or description about the repository.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryDescription",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryDescription",
          "marshallLocationName" : "repositoryDescription",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@param repositoryDescription A comment or description about the repository.*/",
        "getterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@return A comment or description about the repository.*/",
        "fluentSetterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@param repositoryDescription A comment or description about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@param repositoryDescription A comment or description about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The repository's default branch name.</p>",
        "name" : "DefaultBranch",
        "c2jName" : "defaultBranch",
        "c2jShape" : "BranchName",
        "variable" : {
          "variableName" : "defaultBranch",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The repository's default branch name.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "defaultBranch",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "defaultBranch",
          "marshallLocationName" : "defaultBranch",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The repository's default branch name.</p>\n@param defaultBranch The repository's default branch name.*/",
        "getterDocumentation" : "/**<p>The repository's default branch name.</p>\n@return The repository's default branch name.*/",
        "fluentSetterDocumentation" : "/**<p>The repository's default branch name.</p>\n@param defaultBranch The repository's default branch name.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The repository's default branch name.</p>\n@param defaultBranch The repository's default branch name.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The date and time the repository was last modified, in timestamp format.</p>",
        "name" : "LastModifiedDate",
        "c2jName" : "lastModifiedDate",
        "c2jShape" : "LastModifiedDate",
        "variable" : {
          "variableName" : "lastModifiedDate",
          "variableType" : "java.util.Date",
          "variableDeclarationType" : "java.util.Date",
          "documentation" : "<p>The date and time the repository was last modified, in timestamp format.</p>",
          "simpleType" : "Date",
          "variableSetterType" : "java.util.Date"
        },
        "setterModel" : {
          "variableName" : "lastModifiedDate",
          "variableType" : "java.util.Date",
          "variableDeclarationType" : "java.util.Date",
          "documentation" : "",
          "simpleType" : "Date",
          "variableSetterType" : "java.util.Date"
        },
        "getterModel" : {
          "returnType" : "java.util.Date",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "lastModifiedDate",
          "marshallLocationName" : "lastModifiedDate",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@param lastModifiedDate The date and time the repository was last modified, in timestamp format.*/",
        "getterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@return The date and time the repository was last modified, in timestamp format.*/",
        "fluentSetterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@param lastModifiedDate The date and time the repository was last modified, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@param lastModifiedDate The date and time the repository was last modified, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The date and time the repository was created, in timestamp format.</p>",
        "name" : "CreationDate",
        "c2jName" : "creationDate",
        "c2jShape" : "CreationDate",
        "variable" : {
          "variableName" : "creationDate",
          "variableType" : "java.util.Date",
          "variableDeclarationType" : "java.util.Date",
          "documentation" : "<p>The date and time the repository was created, in timestamp format.</p>",
          "simpleType" : "Date",
          "variableSetterType" : "java.util.Date"
        },
        "setterModel" : {
          "variableName" : "creationDate",
          "variableType" : "java.util.Date",
          "variableDeclarationType" : "java.util.Date",
          "documentation" : "",
          "simpleType" : "Date",
          "variableSetterType" : "java.util.Date"
        },
        "getterModel" : {
          "returnType" : "java.util.Date",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "creationDate",
          "marshallLocationName" : "creationDate",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@param creationDate The date and time the repository was created, in timestamp format.*/",
        "getterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@return The date and time the repository was created, in timestamp format.*/",
        "fluentSetterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@param creationDate The date and time the repository was created, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@param creationDate The date and time the repository was created, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The URL to use for cloning the repository over HTTPS.</p>",
        "name" : "CloneUrlHttp",
        "c2jName" : "cloneUrlHttp",
        "c2jShape" : "CloneUrlHttp",
        "variable" : {
          "variableName" : "cloneUrlHttp",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The URL to use for cloning the repository over HTTPS.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "cloneUrlHttp",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "cloneUrlHttp",
          "marshallLocationName" : "cloneUrlHttp",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@param cloneUrlHttp The URL to use for cloning the repository over HTTPS.*/",
        "getterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@return The URL to use for cloning the repository over HTTPS.*/",
        "fluentSetterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@param cloneUrlHttp The URL to use for cloning the repository over HTTPS.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@param cloneUrlHttp The URL to use for cloning the repository over HTTPS.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The URL to use for cloning the repository over SSH.</p>",
        "name" : "CloneUrlSsh",
        "c2jName" : "cloneUrlSsh",
        "c2jShape" : "CloneUrlSsh",
        "variable" : {
          "variableName" : "cloneUrlSsh",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The URL to use for cloning the repository over SSH.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "cloneUrlSsh",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "cloneUrlSsh",
          "marshallLocationName" : "cloneUrlSsh",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@param cloneUrlSsh The URL to use for cloning the repository over SSH.*/",
        "getterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@return The URL to use for cloning the repository over SSH.*/",
        "fluentSetterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@param cloneUrlSsh The URL to use for cloning the repository over SSH.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@param cloneUrlSsh The URL to use for cloning the repository over SSH.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The Amazon Resource Name (ARN) of the repository.</p>",
        "name" : "Arn",
        "c2jName" : "Arn",
        "c2jShape" : "Arn",
        "variable" : {
          "variableName" : "arn",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The Amazon Resource Name (ARN) of the repository.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "arn",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "Arn",
          "marshallLocationName" : "Arn",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@param arn The Amazon Resource Name (ARN) of the repository.*/",
        "getterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@return The Amazon Resource Name (ARN) of the repository.*/",
        "fluentSetterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@param arn The Amazon Resource Name (ARN) of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@param arn The Amazon Resource Name (ARN) of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "repositoryMetadata",
        "variableType" : "RepositoryMetadata",
        "variableDeclarationType" : "RepositoryMetadata",
        "documentation" : null,
        "simpleType" : "RepositoryMetadata",
        "variableSetterType" : "RepositoryMetadata"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryDescription" : {
          "documentation" : "<p>A comment or description about the repository.</p>",
          "name" : "RepositoryDescription",
          "c2jName" : "repositoryDescription",
          "c2jShape" : "RepositoryDescription",
          "variable" : {
            "variableName" : "repositoryDescription",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>A comment or description about the repository.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryDescription",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryDescription",
            "marshallLocationName" : "repositoryDescription",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@param repositoryDescription A comment or description about the repository.*/",
          "getterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@return A comment or description about the repository.*/",
          "fluentSetterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@param repositoryDescription A comment or description about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>A comment or description about the repository.</p>\n@param repositoryDescription A comment or description about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "RepositoryName" : {
          "documentation" : "<p>The repository's name.</p>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The repository's name.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The repository's name.</p>\n@param repositoryName The repository's name.*/",
          "getterDocumentation" : "/**<p>The repository's name.</p>\n@return The repository's name.*/",
          "fluentSetterDocumentation" : "/**<p>The repository's name.</p>\n@param repositoryName The repository's name.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The repository's name.</p>\n@param repositoryName The repository's name.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "DefaultBranch" : {
          "documentation" : "<p>The repository's default branch name.</p>",
          "name" : "DefaultBranch",
          "c2jName" : "defaultBranch",
          "c2jShape" : "BranchName",
          "variable" : {
            "variableName" : "defaultBranch",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The repository's default branch name.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "defaultBranch",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "defaultBranch",
            "marshallLocationName" : "defaultBranch",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The repository's default branch name.</p>\n@param defaultBranch The repository's default branch name.*/",
          "getterDocumentation" : "/**<p>The repository's default branch name.</p>\n@return The repository's default branch name.*/",
          "fluentSetterDocumentation" : "/**<p>The repository's default branch name.</p>\n@param defaultBranch The repository's default branch name.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The repository's default branch name.</p>\n@param defaultBranch The repository's default branch name.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "AccountId" : {
          "documentation" : "<p>The ID of the AWS account associated with the repository.</p>",
          "name" : "AccountId",
          "c2jName" : "accountId",
          "c2jShape" : "AccountId",
          "variable" : {
            "variableName" : "accountId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The ID of the AWS account associated with the repository.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "accountId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "accountId",
            "marshallLocationName" : "accountId",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@param accountId The ID of the AWS account associated with the repository.*/",
          "getterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@return The ID of the AWS account associated with the repository.*/",
          "fluentSetterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@param accountId The ID of the AWS account associated with the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The ID of the AWS account associated with the repository.</p>\n@param accountId The ID of the AWS account associated with the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "CloneUrlSsh" : {
          "documentation" : "<p>The URL to use for cloning the repository over SSH.</p>",
          "name" : "CloneUrlSsh",
          "c2jName" : "cloneUrlSsh",
          "c2jShape" : "CloneUrlSsh",
          "variable" : {
            "variableName" : "cloneUrlSsh",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The URL to use for cloning the repository over SSH.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "cloneUrlSsh",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "cloneUrlSsh",
            "marshallLocationName" : "cloneUrlSsh",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@param cloneUrlSsh The URL to use for cloning the repository over SSH.*/",
          "getterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@return The URL to use for cloning the repository over SSH.*/",
          "fluentSetterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@param cloneUrlSsh The URL to use for cloning the repository over SSH.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The URL to use for cloning the repository over SSH.</p>\n@param cloneUrlSsh The URL to use for cloning the repository over SSH.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "LastModifiedDate" : {
          "documentation" : "<p>The date and time the repository was last modified, in timestamp format.</p>",
          "name" : "LastModifiedDate",
          "c2jName" : "lastModifiedDate",
          "c2jShape" : "LastModifiedDate",
          "variable" : {
            "variableName" : "lastModifiedDate",
            "variableType" : "java.util.Date",
            "variableDeclarationType" : "java.util.Date",
            "documentation" : "<p>The date and time the repository was last modified, in timestamp format.</p>",
            "simpleType" : "Date",
            "variableSetterType" : "java.util.Date"
          },
          "setterModel" : {
            "variableName" : "lastModifiedDate",
            "variableType" : "java.util.Date",
            "variableDeclarationType" : "java.util.Date",
            "documentation" : "",
            "simpleType" : "Date",
            "variableSetterType" : "java.util.Date"
          },
          "getterModel" : {
            "returnType" : "java.util.Date",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "lastModifiedDate",
            "marshallLocationName" : "lastModifiedDate",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@param lastModifiedDate The date and time the repository was last modified, in timestamp format.*/",
          "getterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@return The date and time the repository was last modified, in timestamp format.*/",
          "fluentSetterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@param lastModifiedDate The date and time the repository was last modified, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The date and time the repository was last modified, in timestamp format.</p>\n@param lastModifiedDate The date and time the repository was last modified, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "RepositoryId" : {
          "documentation" : "<p>The ID of the repository.</p>",
          "name" : "RepositoryId",
          "c2jName" : "repositoryId",
          "c2jShape" : "RepositoryId",
          "variable" : {
            "variableName" : "repositoryId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The ID of the repository.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryId",
            "marshallLocationName" : "repositoryId",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The ID of the repository.</p>\n@param repositoryId The ID of the repository.*/",
          "getterDocumentation" : "/**<p>The ID of the repository.</p>\n@return The ID of the repository.*/",
          "fluentSetterDocumentation" : "/**<p>The ID of the repository.</p>\n@param repositoryId The ID of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The ID of the repository.</p>\n@param repositoryId The ID of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "CreationDate" : {
          "documentation" : "<p>The date and time the repository was created, in timestamp format.</p>",
          "name" : "CreationDate",
          "c2jName" : "creationDate",
          "c2jShape" : "CreationDate",
          "variable" : {
            "variableName" : "creationDate",
            "variableType" : "java.util.Date",
            "variableDeclarationType" : "java.util.Date",
            "documentation" : "<p>The date and time the repository was created, in timestamp format.</p>",
            "simpleType" : "Date",
            "variableSetterType" : "java.util.Date"
          },
          "setterModel" : {
            "variableName" : "creationDate",
            "variableType" : "java.util.Date",
            "variableDeclarationType" : "java.util.Date",
            "documentation" : "",
            "simpleType" : "Date",
            "variableSetterType" : "java.util.Date"
          },
          "getterModel" : {
            "returnType" : "java.util.Date",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "creationDate",
            "marshallLocationName" : "creationDate",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@param creationDate The date and time the repository was created, in timestamp format.*/",
          "getterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@return The date and time the repository was created, in timestamp format.*/",
          "fluentSetterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@param creationDate The date and time the repository was created, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The date and time the repository was created, in timestamp format.</p>\n@param creationDate The date and time the repository was created, in timestamp format.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "Arn" : {
          "documentation" : "<p>The Amazon Resource Name (ARN) of the repository.</p>",
          "name" : "Arn",
          "c2jName" : "Arn",
          "c2jShape" : "Arn",
          "variable" : {
            "variableName" : "arn",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The Amazon Resource Name (ARN) of the repository.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "arn",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "Arn",
            "marshallLocationName" : "Arn",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@param arn The Amazon Resource Name (ARN) of the repository.*/",
          "getterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@return The Amazon Resource Name (ARN) of the repository.*/",
          "fluentSetterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@param arn The Amazon Resource Name (ARN) of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The Amazon Resource Name (ARN) of the repository.</p>\n@param arn The Amazon Resource Name (ARN) of the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "CloneUrlHttp" : {
          "documentation" : "<p>The URL to use for cloning the repository over HTTPS.</p>",
          "name" : "CloneUrlHttp",
          "c2jName" : "cloneUrlHttp",
          "c2jShape" : "CloneUrlHttp",
          "variable" : {
            "variableName" : "cloneUrlHttp",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The URL to use for cloning the repository over HTTPS.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "cloneUrlHttp",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "cloneUrlHttp",
            "marshallLocationName" : "cloneUrlHttp",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@param cloneUrlHttp The URL to use for cloning the repository over HTTPS.*/",
          "getterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@return The URL to use for cloning the repository over HTTPS.*/",
          "fluentSetterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@param cloneUrlHttp The URL to use for cloning the repository over HTTPS.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The URL to use for cloning the repository over HTTPS.</p>\n@param cloneUrlHttp The URL to use for cloning the repository over HTTPS.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "CreateBranchRequest" : {
      "c2jName" : "CreateBranchInput",
      "documentation" : "<p>Represents the input of a create branch operation.</p>",
      "shapeName" : "CreateBranchRequest",
      "deprecated" : false,
      "required" : [ "repositoryName", "branchName", "commitId" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the repository in which you want to create the new branch.</p>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the repository in which you want to create the new branch.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@param repositoryName The name of the repository in which you want to create the new branch.*/",
        "getterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@return The name of the repository in which you want to create the new branch.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@param repositoryName The name of the repository in which you want to create the new branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@param repositoryName The name of the repository in which you want to create the new branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The name of the new branch to create.</p>",
        "name" : "BranchName",
        "c2jName" : "branchName",
        "c2jShape" : "BranchName",
        "variable" : {
          "variableName" : "branchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the new branch to create.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "branchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "branchName",
          "marshallLocationName" : "branchName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@param branchName The name of the new branch to create.*/",
        "getterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@return The name of the new branch to create.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@param branchName The name of the new branch to create.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@param branchName The name of the new branch to create.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>",
        "name" : "CommitId",
        "c2jName" : "commitId",
        "c2jShape" : "CommitId",
        "variable" : {
          "variableName" : "commitId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "commitId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "commitId",
          "marshallLocationName" : "commitId",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@param commitId The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.*/",
        "getterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@return The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.*/",
        "fluentSetterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@param commitId The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@param commitId The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "createBranchRequest",
        "variableType" : "CreateBranchRequest",
        "variableDeclarationType" : "CreateBranchRequest",
        "documentation" : null,
        "simpleType" : "CreateBranchRequest",
        "variableSetterType" : "CreateBranchRequest"
      },
      "marshaller" : {
        "action" : "CreateBranch",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.CreateBranch",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryName" : {
          "documentation" : "<p>The name of the repository in which you want to create the new branch.</p>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the repository in which you want to create the new branch.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@param repositoryName The name of the repository in which you want to create the new branch.*/",
          "getterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@return The name of the repository in which you want to create the new branch.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@param repositoryName The name of the repository in which you want to create the new branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the repository in which you want to create the new branch.</p>\n@param repositoryName The name of the repository in which you want to create the new branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "BranchName" : {
          "documentation" : "<p>The name of the new branch to create.</p>",
          "name" : "BranchName",
          "c2jName" : "branchName",
          "c2jShape" : "BranchName",
          "variable" : {
            "variableName" : "branchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the new branch to create.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "branchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "branchName",
            "marshallLocationName" : "branchName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@param branchName The name of the new branch to create.*/",
          "getterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@return The name of the new branch to create.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@param branchName The name of the new branch to create.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the new branch to create.</p>\n@param branchName The name of the new branch to create.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "CommitId" : {
          "documentation" : "<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>",
          "name" : "CommitId",
          "c2jName" : "commitId",
          "c2jShape" : "CommitId",
          "variable" : {
            "variableName" : "commitId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "commitId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "commitId",
            "marshallLocationName" : "commitId",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@param commitId The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.*/",
          "getterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@return The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.*/",
          "fluentSetterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@param commitId The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.</note>\n@param commitId The ID of the commit to point the new branch to.</p> <note>If this commit ID is not specified, the new branch will point to the commit that is pointed to by the repository's default branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "GetRepositoryResult" : {
      "c2jName" : "GetRepositoryOutput",
      "documentation" : "<p>Represents the output of a get repository operation.</p>",
      "shapeName" : "GetRepositoryResult",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>Information about the repository.</p>",
        "name" : "RepositoryMetadata",
        "c2jName" : "repositoryMetadata",
        "c2jShape" : "RepositoryMetadata",
        "variable" : {
          "variableName" : "repositoryMetadata",
          "variableType" : "RepositoryMetadata",
          "variableDeclarationType" : "RepositoryMetadata",
          "documentation" : "<p>Information about the repository.</p>",
          "simpleType" : "RepositoryMetadata",
          "variableSetterType" : "RepositoryMetadata"
        },
        "setterModel" : {
          "variableName" : "repositoryMetadata",
          "variableType" : "RepositoryMetadata",
          "variableDeclarationType" : "RepositoryMetadata",
          "documentation" : "",
          "simpleType" : "RepositoryMetadata",
          "variableSetterType" : "RepositoryMetadata"
        },
        "getterModel" : {
          "returnType" : "RepositoryMetadata",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryMetadata",
          "marshallLocationName" : "repositoryMetadata",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>Information about the repository.</p>\n@param repositoryMetadata Information about the repository.*/",
        "getterDocumentation" : "/**<p>Information about the repository.</p>\n@return Information about the repository.*/",
        "fluentSetterDocumentation" : "/**<p>Information about the repository.</p>\n@param repositoryMetadata Information about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>Information about the repository.</p>\n@param repositoryMetadata Information about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "getRepositoryResult",
        "variableType" : "GetRepositoryResult",
        "variableDeclarationType" : "GetRepositoryResult",
        "documentation" : null,
        "simpleType" : "GetRepositoryResult",
        "variableSetterType" : "GetRepositoryResult"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryMetadata" : {
          "documentation" : "<p>Information about the repository.</p>",
          "name" : "RepositoryMetadata",
          "c2jName" : "repositoryMetadata",
          "c2jShape" : "RepositoryMetadata",
          "variable" : {
            "variableName" : "repositoryMetadata",
            "variableType" : "RepositoryMetadata",
            "variableDeclarationType" : "RepositoryMetadata",
            "documentation" : "<p>Information about the repository.</p>",
            "simpleType" : "RepositoryMetadata",
            "variableSetterType" : "RepositoryMetadata"
          },
          "setterModel" : {
            "variableName" : "repositoryMetadata",
            "variableType" : "RepositoryMetadata",
            "variableDeclarationType" : "RepositoryMetadata",
            "documentation" : "",
            "simpleType" : "RepositoryMetadata",
            "variableSetterType" : "RepositoryMetadata"
          },
          "getterModel" : {
            "returnType" : "RepositoryMetadata",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryMetadata",
            "marshallLocationName" : "repositoryMetadata",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>Information about the repository.</p>\n@param repositoryMetadata Information about the repository.*/",
          "getterDocumentation" : "/**<p>Information about the repository.</p>\n@return Information about the repository.*/",
          "fluentSetterDocumentation" : "/**<p>Information about the repository.</p>\n@param repositoryMetadata Information about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>Information about the repository.</p>\n@param repositoryMetadata Information about the repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "BatchGetRepositoriesRequest" : {
      "c2jName" : "BatchGetRepositoriesInput",
      "documentation" : "<p>Represents the input of a batch get repositories operation.</p>",
      "shapeName" : "BatchGetRepositoriesRequest",
      "deprecated" : false,
      "required" : [ "repositoryNames" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The names of the repositories to get information about.</p>",
        "name" : "RepositoryNames",
        "c2jName" : "repositoryNames",
        "c2jShape" : "RepositoryNameList",
        "variable" : {
          "variableName" : "repositoryNames",
          "variableType" : "java.util.List<String>",
          "variableDeclarationType" : "java.util.List<String>",
          "documentation" : "<p>The names of the repositories to get information about.</p>",
          "simpleType" : "List<String>",
          "variableSetterType" : "java.util.Collection<String>"
        },
        "setterModel" : {
          "variableName" : "repositoryNames",
          "variableType" : "java.util.List<String>",
          "variableDeclarationType" : "java.util.List<String>",
          "documentation" : "",
          "simpleType" : "List<String>",
          "variableSetterType" : "java.util.Collection<String>"
        },
        "getterModel" : {
          "returnType" : "java.util.List<String>",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryNames",
          "marshallLocationName" : "repositoryNames",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : {
          "memberType" : "String",
          "memberLocationName" : null,
          "implType" : "java.util.ArrayList",
          "interfaceType" : "java.util.List",
          "listMemberModel" : null,
          "memberAdditionalMarshallingPath" : null,
          "memberAdditionalUnmarshallingPath" : null,
          "simpleType" : "String",
          "simple" : true,
          "map" : false,
          "templateType" : "java.util.List<String>",
          "templateImplType" : "java.util.ArrayList<String>"
        },
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : true,
        "map" : false,
        "setterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n@param repositoryNames The names of the repositories to get information about.*/",
        "getterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n@return The names of the repositories to get information about.*/",
        "fluentSetterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n@param repositoryNames The names of the repositories to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositoryNames(java.util.Collection)} or {@link #withRepositoryNames(java.util.Collection)} if you want to override the existing values.</p>\n@param repositoryNames The names of the repositories to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "batchGetRepositoriesRequest",
        "variableType" : "BatchGetRepositoriesRequest",
        "variableDeclarationType" : "BatchGetRepositoriesRequest",
        "documentation" : null,
        "simpleType" : "BatchGetRepositoriesRequest",
        "variableSetterType" : "BatchGetRepositoriesRequest"
      },
      "marshaller" : {
        "action" : "BatchGetRepositories",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.BatchGetRepositories",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryNames" : {
          "documentation" : "<p>The names of the repositories to get information about.</p>",
          "name" : "RepositoryNames",
          "c2jName" : "repositoryNames",
          "c2jShape" : "RepositoryNameList",
          "variable" : {
            "variableName" : "repositoryNames",
            "variableType" : "java.util.List<String>",
            "variableDeclarationType" : "java.util.List<String>",
            "documentation" : "<p>The names of the repositories to get information about.</p>",
            "simpleType" : "List<String>",
            "variableSetterType" : "java.util.Collection<String>"
          },
          "setterModel" : {
            "variableName" : "repositoryNames",
            "variableType" : "java.util.List<String>",
            "variableDeclarationType" : "java.util.List<String>",
            "documentation" : "",
            "simpleType" : "List<String>",
            "variableSetterType" : "java.util.Collection<String>"
          },
          "getterModel" : {
            "returnType" : "java.util.List<String>",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryNames",
            "marshallLocationName" : "repositoryNames",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : {
            "memberType" : "String",
            "memberLocationName" : null,
            "implType" : "java.util.ArrayList",
            "interfaceType" : "java.util.List",
            "listMemberModel" : null,
            "memberAdditionalMarshallingPath" : null,
            "memberAdditionalUnmarshallingPath" : null,
            "simpleType" : "String",
            "simple" : true,
            "map" : false,
            "templateType" : "java.util.List<String>",
            "templateImplType" : "java.util.ArrayList<String>"
          },
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : true,
          "map" : false,
          "setterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n@param repositoryNames The names of the repositories to get information about.*/",
          "getterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n@return The names of the repositories to get information about.*/",
          "fluentSetterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n@param repositoryNames The names of the repositories to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The names of the repositories to get information about.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositoryNames(java.util.Collection)} or {@link #withRepositoryNames(java.util.Collection)} if you want to override the existing values.</p>\n@param repositoryNames The names of the repositories to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "BranchInfo" : {
      "c2jName" : "BranchInfo",
      "documentation" : "<p>Returns information about a branch.</p>",
      "shapeName" : "BranchInfo",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the branch.</p>",
        "name" : "BranchName",
        "c2jName" : "branchName",
        "c2jShape" : "BranchName",
        "variable" : {
          "variableName" : "branchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the branch.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "branchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "branchName",
          "marshallLocationName" : "branchName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the branch.</p>\n@param branchName The name of the branch.*/",
        "getterDocumentation" : "/**<p>The name of the branch.</p>\n@return The name of the branch.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branchName The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branchName The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The ID of the last commit made to the branch.</p>",
        "name" : "CommitId",
        "c2jName" : "commitId",
        "c2jShape" : "CommitId",
        "variable" : {
          "variableName" : "commitId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The ID of the last commit made to the branch.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "commitId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "commitId",
          "marshallLocationName" : "commitId",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@param commitId The ID of the last commit made to the branch.*/",
        "getterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@return The ID of the last commit made to the branch.*/",
        "fluentSetterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@param commitId The ID of the last commit made to the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@param commitId The ID of the last commit made to the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "branchInfo",
        "variableType" : "BranchInfo",
        "variableDeclarationType" : "BranchInfo",
        "documentation" : null,
        "simpleType" : "BranchInfo",
        "variableSetterType" : "BranchInfo"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "BranchName" : {
          "documentation" : "<p>The name of the branch.</p>",
          "name" : "BranchName",
          "c2jName" : "branchName",
          "c2jShape" : "BranchName",
          "variable" : {
            "variableName" : "branchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the branch.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "branchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "branchName",
            "marshallLocationName" : "branchName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the branch.</p>\n@param branchName The name of the branch.*/",
          "getterDocumentation" : "/**<p>The name of the branch.</p>\n@return The name of the branch.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branchName The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branchName The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "CommitId" : {
          "documentation" : "<p>The ID of the last commit made to the branch.</p>",
          "name" : "CommitId",
          "c2jName" : "commitId",
          "c2jShape" : "CommitId",
          "variable" : {
            "variableName" : "commitId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The ID of the last commit made to the branch.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "commitId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "commitId",
            "marshallLocationName" : "commitId",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@param commitId The ID of the last commit made to the branch.*/",
          "getterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@return The ID of the last commit made to the branch.*/",
          "fluentSetterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@param commitId The ID of the last commit made to the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The ID of the last commit made to the branch.</p>\n@param commitId The ID of the last commit made to the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "EncryptionKeyNotFoundException" : {
      "c2jName" : "EncryptionKeyNotFoundException",
      "documentation" : "<p>No encryption key was found.</p>",
      "shapeName" : "EncryptionKeyNotFoundException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "encryptionKeyNotFoundException",
        "variableType" : "EncryptionKeyNotFoundException",
        "variableDeclarationType" : "EncryptionKeyNotFoundException",
        "documentation" : null,
        "simpleType" : "EncryptionKeyNotFoundException",
        "variableSetterType" : "EncryptionKeyNotFoundException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "EncryptionKeyNotFoundException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "ListRepositoriesResult" : {
      "c2jName" : "ListRepositoriesOutput",
      "documentation" : "<p>Represents the output of a list repositories operation.</p>",
      "shapeName" : "ListRepositoriesResult",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>Lists the repositories called by the list repositories operation.</p>",
        "name" : "Repositories",
        "c2jName" : "repositories",
        "c2jShape" : "RepositoryNameIdPairList",
        "variable" : {
          "variableName" : "repositories",
          "variableType" : "java.util.List<RepositoryNameIdPair>",
          "variableDeclarationType" : "java.util.List<RepositoryNameIdPair>",
          "documentation" : "<p>Lists the repositories called by the list repositories operation.</p>",
          "simpleType" : "List<RepositoryNameIdPair>",
          "variableSetterType" : "java.util.Collection<RepositoryNameIdPair>"
        },
        "setterModel" : {
          "variableName" : "repositories",
          "variableType" : "java.util.List<RepositoryNameIdPair>",
          "variableDeclarationType" : "java.util.List<RepositoryNameIdPair>",
          "documentation" : "",
          "simpleType" : "List<RepositoryNameIdPair>",
          "variableSetterType" : "java.util.Collection<RepositoryNameIdPair>"
        },
        "getterModel" : {
          "returnType" : "java.util.List<RepositoryNameIdPair>",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositories",
          "marshallLocationName" : "repositories",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : {
          "memberType" : "RepositoryNameIdPair",
          "memberLocationName" : null,
          "implType" : "java.util.ArrayList",
          "interfaceType" : "java.util.List",
          "listMemberModel" : {
            "documentation" : "",
            "name" : "Member",
            "c2jName" : "member",
            "c2jShape" : "RepositoryNameIdPair",
            "variable" : {
              "variableName" : "member",
              "variableType" : "RepositoryNameIdPair",
              "variableDeclarationType" : "RepositoryNameIdPair",
              "documentation" : "",
              "simpleType" : "RepositoryNameIdPair",
              "variableSetterType" : "RepositoryNameIdPair"
            },
            "setterModel" : {
              "variableName" : "member",
              "variableType" : "RepositoryNameIdPair",
              "variableDeclarationType" : "RepositoryNameIdPair",
              "documentation" : "",
              "simpleType" : "RepositoryNameIdPair",
              "variableSetterType" : "RepositoryNameIdPair"
            },
            "getterModel" : {
              "returnType" : "RepositoryNameIdPair",
              "documentation" : null
            },
            "http" : {
              "unmarshallLocationName" : "member",
              "marshallLocationName" : "member",
              "additionalUnmarshallingPath" : null,
              "additionalMarshallingPath" : null,
              "isPayload" : false,
              "isStreaming" : false,
              "location" : null,
              "flattened" : false,
              "header" : false,
              "uri" : false,
              "statusCode" : false,
              "queryString" : false
            },
            "deprecated" : false,
            "listModel" : null,
            "mapModel" : null,
            "enumType" : null,
            "xmlNameSpaceUri" : null,
            "simple" : false,
            "list" : false,
            "map" : false,
            "setterDocumentation" : "/**\n@param member */",
            "getterDocumentation" : "/**\n@return */",
            "fluentSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/",
            "varargSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/"
          },
          "memberAdditionalMarshallingPath" : null,
          "memberAdditionalUnmarshallingPath" : null,
          "simpleType" : "RepositoryNameIdPair",
          "simple" : false,
          "map" : false,
          "templateType" : "java.util.List<RepositoryNameIdPair>",
          "templateImplType" : "java.util.ArrayList<RepositoryNameIdPair>"
        },
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : true,
        "map" : false,
        "setterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n@param repositories Lists the repositories called by the list repositories operation.*/",
        "getterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n@return Lists the repositories called by the list repositories operation.*/",
        "fluentSetterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n@param repositories Lists the repositories called by the list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositories(java.util.Collection)} or {@link #withRepositories(java.util.Collection)} if you want to override the existing values.</p>\n@param repositories Lists the repositories called by the list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
        "name" : "NextToken",
        "c2jName" : "nextToken",
        "c2jShape" : "NextToken",
        "variable" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "nextToken",
          "marshallLocationName" : "nextToken",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
        "getterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@return An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
        "fluentSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "listRepositoriesResult",
        "variableType" : "ListRepositoriesResult",
        "variableDeclarationType" : "ListRepositoriesResult",
        "documentation" : null,
        "simpleType" : "ListRepositoriesResult",
        "variableSetterType" : "ListRepositoriesResult"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "NextToken" : {
          "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
          "name" : "NextToken",
          "c2jName" : "nextToken",
          "c2jShape" : "NextToken",
          "variable" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "nextToken",
            "marshallLocationName" : "nextToken",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
          "getterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@return An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
          "fluentSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "Repositories" : {
          "documentation" : "<p>Lists the repositories called by the list repositories operation.</p>",
          "name" : "Repositories",
          "c2jName" : "repositories",
          "c2jShape" : "RepositoryNameIdPairList",
          "variable" : {
            "variableName" : "repositories",
            "variableType" : "java.util.List<RepositoryNameIdPair>",
            "variableDeclarationType" : "java.util.List<RepositoryNameIdPair>",
            "documentation" : "<p>Lists the repositories called by the list repositories operation.</p>",
            "simpleType" : "List<RepositoryNameIdPair>",
            "variableSetterType" : "java.util.Collection<RepositoryNameIdPair>"
          },
          "setterModel" : {
            "variableName" : "repositories",
            "variableType" : "java.util.List<RepositoryNameIdPair>",
            "variableDeclarationType" : "java.util.List<RepositoryNameIdPair>",
            "documentation" : "",
            "simpleType" : "List<RepositoryNameIdPair>",
            "variableSetterType" : "java.util.Collection<RepositoryNameIdPair>"
          },
          "getterModel" : {
            "returnType" : "java.util.List<RepositoryNameIdPair>",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositories",
            "marshallLocationName" : "repositories",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : {
            "memberType" : "RepositoryNameIdPair",
            "memberLocationName" : null,
            "implType" : "java.util.ArrayList",
            "interfaceType" : "java.util.List",
            "listMemberModel" : {
              "documentation" : "",
              "name" : "Member",
              "c2jName" : "member",
              "c2jShape" : "RepositoryNameIdPair",
              "variable" : {
                "variableName" : "member",
                "variableType" : "RepositoryNameIdPair",
                "variableDeclarationType" : "RepositoryNameIdPair",
                "documentation" : "",
                "simpleType" : "RepositoryNameIdPair",
                "variableSetterType" : "RepositoryNameIdPair"
              },
              "setterModel" : {
                "variableName" : "member",
                "variableType" : "RepositoryNameIdPair",
                "variableDeclarationType" : "RepositoryNameIdPair",
                "documentation" : "",
                "simpleType" : "RepositoryNameIdPair",
                "variableSetterType" : "RepositoryNameIdPair"
              },
              "getterModel" : {
                "returnType" : "RepositoryNameIdPair",
                "documentation" : null
              },
              "http" : {
                "unmarshallLocationName" : "member",
                "marshallLocationName" : "member",
                "additionalUnmarshallingPath" : null,
                "additionalMarshallingPath" : null,
                "isPayload" : false,
                "isStreaming" : false,
                "location" : null,
                "flattened" : false,
                "header" : false,
                "uri" : false,
                "statusCode" : false,
                "queryString" : false
              },
              "deprecated" : false,
              "listModel" : null,
              "mapModel" : null,
              "enumType" : null,
              "xmlNameSpaceUri" : null,
              "simple" : false,
              "list" : false,
              "map" : false,
              "setterDocumentation" : "/**\n@param member */",
              "getterDocumentation" : "/**\n@return */",
              "fluentSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/",
              "varargSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/"
            },
            "memberAdditionalMarshallingPath" : null,
            "memberAdditionalUnmarshallingPath" : null,
            "simpleType" : "RepositoryNameIdPair",
            "simple" : false,
            "map" : false,
            "templateType" : "java.util.List<RepositoryNameIdPair>",
            "templateImplType" : "java.util.ArrayList<RepositoryNameIdPair>"
          },
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : true,
          "map" : false,
          "setterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n@param repositories Lists the repositories called by the list repositories operation.*/",
          "getterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n@return Lists the repositories called by the list repositories operation.*/",
          "fluentSetterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n@param repositories Lists the repositories called by the list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>Lists the repositories called by the list repositories operation.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositories(java.util.Collection)} or {@link #withRepositories(java.util.Collection)} if you want to override the existing values.</p>\n@param repositories Lists the repositories called by the list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "InvalidSortByException" : {
      "c2jName" : "InvalidSortByException",
      "documentation" : "<p>The specified sort by value is not valid.</p>",
      "shapeName" : "InvalidSortByException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "invalidSortByException",
        "variableType" : "InvalidSortByException",
        "variableDeclarationType" : "InvalidSortByException",
        "documentation" : null,
        "simpleType" : "InvalidSortByException",
        "variableSetterType" : "InvalidSortByException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "InvalidSortByException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "InvalidRepositoryNameException" : {
      "c2jName" : "InvalidRepositoryNameException",
      "documentation" : "<p>At least one specified repository name is not valid.</p> <note>This exception only occurs when a specified repository name is not valid. Other exceptions occur when a required repository parameter is missing, or when a specified repository does not exist.</note>",
      "shapeName" : "InvalidRepositoryNameException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "invalidRepositoryNameException",
        "variableType" : "InvalidRepositoryNameException",
        "variableDeclarationType" : "InvalidRepositoryNameException",
        "documentation" : null,
        "simpleType" : "InvalidRepositoryNameException",
        "variableSetterType" : "InvalidRepositoryNameException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "InvalidRepositoryNameException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "RepositoryDoesNotExistException" : {
      "c2jName" : "RepositoryDoesNotExistException",
      "documentation" : "<p>The specified repository does not exist.</p>",
      "shapeName" : "RepositoryDoesNotExistException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "repositoryDoesNotExistException",
        "variableType" : "RepositoryDoesNotExistException",
        "variableDeclarationType" : "RepositoryDoesNotExistException",
        "documentation" : null,
        "simpleType" : "RepositoryDoesNotExistException",
        "variableSetterType" : "RepositoryDoesNotExistException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "RepositoryDoesNotExistException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "BatchGetRepositoriesResult" : {
      "c2jName" : "BatchGetRepositoriesOutput",
      "documentation" : "<p>Represents the output of a batch get repositories operation.</p>",
      "shapeName" : "BatchGetRepositoriesResult",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>A list of repositories returned by the batch get repositories operation.</p>",
        "name" : "Repositories",
        "c2jName" : "repositories",
        "c2jShape" : "RepositoryMetadataList",
        "variable" : {
          "variableName" : "repositories",
          "variableType" : "java.util.List<RepositoryMetadata>",
          "variableDeclarationType" : "java.util.List<RepositoryMetadata>",
          "documentation" : "<p>A list of repositories returned by the batch get repositories operation.</p>",
          "simpleType" : "List<RepositoryMetadata>",
          "variableSetterType" : "java.util.Collection<RepositoryMetadata>"
        },
        "setterModel" : {
          "variableName" : "repositories",
          "variableType" : "java.util.List<RepositoryMetadata>",
          "variableDeclarationType" : "java.util.List<RepositoryMetadata>",
          "documentation" : "",
          "simpleType" : "List<RepositoryMetadata>",
          "variableSetterType" : "java.util.Collection<RepositoryMetadata>"
        },
        "getterModel" : {
          "returnType" : "java.util.List<RepositoryMetadata>",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositories",
          "marshallLocationName" : "repositories",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : {
          "memberType" : "RepositoryMetadata",
          "memberLocationName" : null,
          "implType" : "java.util.ArrayList",
          "interfaceType" : "java.util.List",
          "listMemberModel" : {
            "documentation" : "",
            "name" : "Member",
            "c2jName" : "member",
            "c2jShape" : "RepositoryMetadata",
            "variable" : {
              "variableName" : "member",
              "variableType" : "RepositoryMetadata",
              "variableDeclarationType" : "RepositoryMetadata",
              "documentation" : "",
              "simpleType" : "RepositoryMetadata",
              "variableSetterType" : "RepositoryMetadata"
            },
            "setterModel" : {
              "variableName" : "member",
              "variableType" : "RepositoryMetadata",
              "variableDeclarationType" : "RepositoryMetadata",
              "documentation" : "",
              "simpleType" : "RepositoryMetadata",
              "variableSetterType" : "RepositoryMetadata"
            },
            "getterModel" : {
              "returnType" : "RepositoryMetadata",
              "documentation" : null
            },
            "http" : {
              "unmarshallLocationName" : "member",
              "marshallLocationName" : "member",
              "additionalUnmarshallingPath" : null,
              "additionalMarshallingPath" : null,
              "isPayload" : false,
              "isStreaming" : false,
              "location" : null,
              "flattened" : false,
              "header" : false,
              "uri" : false,
              "statusCode" : false,
              "queryString" : false
            },
            "deprecated" : false,
            "listModel" : null,
            "mapModel" : null,
            "enumType" : null,
            "xmlNameSpaceUri" : null,
            "simple" : false,
            "list" : false,
            "map" : false,
            "setterDocumentation" : "/**\n@param member */",
            "getterDocumentation" : "/**\n@return */",
            "fluentSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/",
            "varargSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/"
          },
          "memberAdditionalMarshallingPath" : null,
          "memberAdditionalUnmarshallingPath" : null,
          "simpleType" : "RepositoryMetadata",
          "simple" : false,
          "map" : false,
          "templateType" : "java.util.List<RepositoryMetadata>",
          "templateImplType" : "java.util.ArrayList<RepositoryMetadata>"
        },
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : true,
        "map" : false,
        "setterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n@param repositories A list of repositories returned by the batch get repositories operation.*/",
        "getterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n@return A list of repositories returned by the batch get repositories operation.*/",
        "fluentSetterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n@param repositories A list of repositories returned by the batch get repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositories(java.util.Collection)} or {@link #withRepositories(java.util.Collection)} if you want to override the existing values.</p>\n@param repositories A list of repositories returned by the batch get repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>Returns a list of repository names for which information could not be found.</p>",
        "name" : "RepositoriesNotFound",
        "c2jName" : "repositoriesNotFound",
        "c2jShape" : "RepositoryNotFoundList",
        "variable" : {
          "variableName" : "repositoriesNotFound",
          "variableType" : "java.util.List<String>",
          "variableDeclarationType" : "java.util.List<String>",
          "documentation" : "<p>Returns a list of repository names for which information could not be found.</p>",
          "simpleType" : "List<String>",
          "variableSetterType" : "java.util.Collection<String>"
        },
        "setterModel" : {
          "variableName" : "repositoriesNotFound",
          "variableType" : "java.util.List<String>",
          "variableDeclarationType" : "java.util.List<String>",
          "documentation" : "",
          "simpleType" : "List<String>",
          "variableSetterType" : "java.util.Collection<String>"
        },
        "getterModel" : {
          "returnType" : "java.util.List<String>",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoriesNotFound",
          "marshallLocationName" : "repositoriesNotFound",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : {
          "memberType" : "String",
          "memberLocationName" : null,
          "implType" : "java.util.ArrayList",
          "interfaceType" : "java.util.List",
          "listMemberModel" : null,
          "memberAdditionalMarshallingPath" : null,
          "memberAdditionalUnmarshallingPath" : null,
          "simpleType" : "String",
          "simple" : true,
          "map" : false,
          "templateType" : "java.util.List<String>",
          "templateImplType" : "java.util.ArrayList<String>"
        },
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : true,
        "map" : false,
        "setterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n@param repositoriesNotFound Returns a list of repository names for which information could not be found.*/",
        "getterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n@return Returns a list of repository names for which information could not be found.*/",
        "fluentSetterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n@param repositoriesNotFound Returns a list of repository names for which information could not be found.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositoriesNotFound(java.util.Collection)} or {@link #withRepositoriesNotFound(java.util.Collection)} if you want to override the existing values.</p>\n@param repositoriesNotFound Returns a list of repository names for which information could not be found.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "batchGetRepositoriesResult",
        "variableType" : "BatchGetRepositoriesResult",
        "variableDeclarationType" : "BatchGetRepositoriesResult",
        "documentation" : null,
        "simpleType" : "BatchGetRepositoriesResult",
        "variableSetterType" : "BatchGetRepositoriesResult"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "Repositories" : {
          "documentation" : "<p>A list of repositories returned by the batch get repositories operation.</p>",
          "name" : "Repositories",
          "c2jName" : "repositories",
          "c2jShape" : "RepositoryMetadataList",
          "variable" : {
            "variableName" : "repositories",
            "variableType" : "java.util.List<RepositoryMetadata>",
            "variableDeclarationType" : "java.util.List<RepositoryMetadata>",
            "documentation" : "<p>A list of repositories returned by the batch get repositories operation.</p>",
            "simpleType" : "List<RepositoryMetadata>",
            "variableSetterType" : "java.util.Collection<RepositoryMetadata>"
          },
          "setterModel" : {
            "variableName" : "repositories",
            "variableType" : "java.util.List<RepositoryMetadata>",
            "variableDeclarationType" : "java.util.List<RepositoryMetadata>",
            "documentation" : "",
            "simpleType" : "List<RepositoryMetadata>",
            "variableSetterType" : "java.util.Collection<RepositoryMetadata>"
          },
          "getterModel" : {
            "returnType" : "java.util.List<RepositoryMetadata>",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositories",
            "marshallLocationName" : "repositories",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : {
            "memberType" : "RepositoryMetadata",
            "memberLocationName" : null,
            "implType" : "java.util.ArrayList",
            "interfaceType" : "java.util.List",
            "listMemberModel" : {
              "documentation" : "",
              "name" : "Member",
              "c2jName" : "member",
              "c2jShape" : "RepositoryMetadata",
              "variable" : {
                "variableName" : "member",
                "variableType" : "RepositoryMetadata",
                "variableDeclarationType" : "RepositoryMetadata",
                "documentation" : "",
                "simpleType" : "RepositoryMetadata",
                "variableSetterType" : "RepositoryMetadata"
              },
              "setterModel" : {
                "variableName" : "member",
                "variableType" : "RepositoryMetadata",
                "variableDeclarationType" : "RepositoryMetadata",
                "documentation" : "",
                "simpleType" : "RepositoryMetadata",
                "variableSetterType" : "RepositoryMetadata"
              },
              "getterModel" : {
                "returnType" : "RepositoryMetadata",
                "documentation" : null
              },
              "http" : {
                "unmarshallLocationName" : "member",
                "marshallLocationName" : "member",
                "additionalUnmarshallingPath" : null,
                "additionalMarshallingPath" : null,
                "isPayload" : false,
                "isStreaming" : false,
                "location" : null,
                "flattened" : false,
                "header" : false,
                "uri" : false,
                "statusCode" : false,
                "queryString" : false
              },
              "deprecated" : false,
              "listModel" : null,
              "mapModel" : null,
              "enumType" : null,
              "xmlNameSpaceUri" : null,
              "simple" : false,
              "list" : false,
              "map" : false,
              "setterDocumentation" : "/**\n@param member */",
              "getterDocumentation" : "/**\n@return */",
              "fluentSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/",
              "varargSetterDocumentation" : "/**\n@param member \n@return Returns a reference to this object so that method calls can be chained together.*/"
            },
            "memberAdditionalMarshallingPath" : null,
            "memberAdditionalUnmarshallingPath" : null,
            "simpleType" : "RepositoryMetadata",
            "simple" : false,
            "map" : false,
            "templateType" : "java.util.List<RepositoryMetadata>",
            "templateImplType" : "java.util.ArrayList<RepositoryMetadata>"
          },
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : true,
          "map" : false,
          "setterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n@param repositories A list of repositories returned by the batch get repositories operation.*/",
          "getterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n@return A list of repositories returned by the batch get repositories operation.*/",
          "fluentSetterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n@param repositories A list of repositories returned by the batch get repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>A list of repositories returned by the batch get repositories operation.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositories(java.util.Collection)} or {@link #withRepositories(java.util.Collection)} if you want to override the existing values.</p>\n@param repositories A list of repositories returned by the batch get repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "RepositoriesNotFound" : {
          "documentation" : "<p>Returns a list of repository names for which information could not be found.</p>",
          "name" : "RepositoriesNotFound",
          "c2jName" : "repositoriesNotFound",
          "c2jShape" : "RepositoryNotFoundList",
          "variable" : {
            "variableName" : "repositoriesNotFound",
            "variableType" : "java.util.List<String>",
            "variableDeclarationType" : "java.util.List<String>",
            "documentation" : "<p>Returns a list of repository names for which information could not be found.</p>",
            "simpleType" : "List<String>",
            "variableSetterType" : "java.util.Collection<String>"
          },
          "setterModel" : {
            "variableName" : "repositoriesNotFound",
            "variableType" : "java.util.List<String>",
            "variableDeclarationType" : "java.util.List<String>",
            "documentation" : "",
            "simpleType" : "List<String>",
            "variableSetterType" : "java.util.Collection<String>"
          },
          "getterModel" : {
            "returnType" : "java.util.List<String>",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoriesNotFound",
            "marshallLocationName" : "repositoriesNotFound",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : {
            "memberType" : "String",
            "memberLocationName" : null,
            "implType" : "java.util.ArrayList",
            "interfaceType" : "java.util.List",
            "listMemberModel" : null,
            "memberAdditionalMarshallingPath" : null,
            "memberAdditionalUnmarshallingPath" : null,
            "simpleType" : "String",
            "simple" : true,
            "map" : false,
            "templateType" : "java.util.List<String>",
            "templateImplType" : "java.util.ArrayList<String>"
          },
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : true,
          "map" : false,
          "setterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n@param repositoriesNotFound Returns a list of repository names for which information could not be found.*/",
          "getterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n@return Returns a list of repository names for which information could not be found.*/",
          "fluentSetterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n@param repositoriesNotFound Returns a list of repository names for which information could not be found.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>Returns a list of repository names for which information could not be found.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setRepositoriesNotFound(java.util.Collection)} or {@link #withRepositoriesNotFound(java.util.Collection)} if you want to override the existing values.</p>\n@param repositoriesNotFound Returns a list of repository names for which information could not be found.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "DeleteRepositoryRequest" : {
      "c2jName" : "DeleteRepositoryInput",
      "documentation" : "<p>Represents the input of a delete repository operation.</p>",
      "shapeName" : "DeleteRepositoryRequest",
      "deprecated" : false,
      "required" : [ "repositoryName" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the repository to delete.</p>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the repository to delete.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@param repositoryName The name of the repository to delete.*/",
        "getterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@return The name of the repository to delete.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@param repositoryName The name of the repository to delete.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@param repositoryName The name of the repository to delete.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "deleteRepositoryRequest",
        "variableType" : "DeleteRepositoryRequest",
        "variableDeclarationType" : "DeleteRepositoryRequest",
        "documentation" : null,
        "simpleType" : "DeleteRepositoryRequest",
        "variableSetterType" : "DeleteRepositoryRequest"
      },
      "marshaller" : {
        "action" : "DeleteRepository",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.DeleteRepository",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryName" : {
          "documentation" : "<p>The name of the repository to delete.</p>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the repository to delete.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@param repositoryName The name of the repository to delete.*/",
          "getterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@return The name of the repository to delete.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@param repositoryName The name of the repository to delete.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the repository to delete.</p>\n@param repositoryName The name of the repository to delete.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "EncryptionKeyDisabledException" : {
      "c2jName" : "EncryptionKeyDisabledException",
      "documentation" : "<p>The encryption key is disabled.</p>",
      "shapeName" : "EncryptionKeyDisabledException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "encryptionKeyDisabledException",
        "variableType" : "EncryptionKeyDisabledException",
        "variableDeclarationType" : "EncryptionKeyDisabledException",
        "documentation" : null,
        "simpleType" : "EncryptionKeyDisabledException",
        "variableSetterType" : "EncryptionKeyDisabledException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "EncryptionKeyDisabledException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "BranchNameExistsException" : {
      "c2jName" : "BranchNameExistsException",
      "documentation" : "<p>The specified branch name already exists.</p>",
      "shapeName" : "BranchNameExistsException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "branchNameExistsException",
        "variableType" : "BranchNameExistsException",
        "variableDeclarationType" : "BranchNameExistsException",
        "documentation" : null,
        "simpleType" : "BranchNameExistsException",
        "variableSetterType" : "BranchNameExistsException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "BranchNameExistsException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "CreateRepositoryResult" : {
      "c2jName" : "CreateRepositoryOutput",
      "documentation" : "<p>Represents the output of a create repository operation.</p>",
      "shapeName" : "CreateRepositoryResult",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>Information about the newly created repository.</p>",
        "name" : "RepositoryMetadata",
        "c2jName" : "repositoryMetadata",
        "c2jShape" : "RepositoryMetadata",
        "variable" : {
          "variableName" : "repositoryMetadata",
          "variableType" : "RepositoryMetadata",
          "variableDeclarationType" : "RepositoryMetadata",
          "documentation" : "<p>Information about the newly created repository.</p>",
          "simpleType" : "RepositoryMetadata",
          "variableSetterType" : "RepositoryMetadata"
        },
        "setterModel" : {
          "variableName" : "repositoryMetadata",
          "variableType" : "RepositoryMetadata",
          "variableDeclarationType" : "RepositoryMetadata",
          "documentation" : "",
          "simpleType" : "RepositoryMetadata",
          "variableSetterType" : "RepositoryMetadata"
        },
        "getterModel" : {
          "returnType" : "RepositoryMetadata",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryMetadata",
          "marshallLocationName" : "repositoryMetadata",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@param repositoryMetadata Information about the newly created repository.*/",
        "getterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@return Information about the newly created repository.*/",
        "fluentSetterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@param repositoryMetadata Information about the newly created repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@param repositoryMetadata Information about the newly created repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "createRepositoryResult",
        "variableType" : "CreateRepositoryResult",
        "variableDeclarationType" : "CreateRepositoryResult",
        "documentation" : null,
        "simpleType" : "CreateRepositoryResult",
        "variableSetterType" : "CreateRepositoryResult"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryMetadata" : {
          "documentation" : "<p>Information about the newly created repository.</p>",
          "name" : "RepositoryMetadata",
          "c2jName" : "repositoryMetadata",
          "c2jShape" : "RepositoryMetadata",
          "variable" : {
            "variableName" : "repositoryMetadata",
            "variableType" : "RepositoryMetadata",
            "variableDeclarationType" : "RepositoryMetadata",
            "documentation" : "<p>Information about the newly created repository.</p>",
            "simpleType" : "RepositoryMetadata",
            "variableSetterType" : "RepositoryMetadata"
          },
          "setterModel" : {
            "variableName" : "repositoryMetadata",
            "variableType" : "RepositoryMetadata",
            "variableDeclarationType" : "RepositoryMetadata",
            "documentation" : "",
            "simpleType" : "RepositoryMetadata",
            "variableSetterType" : "RepositoryMetadata"
          },
          "getterModel" : {
            "returnType" : "RepositoryMetadata",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryMetadata",
            "marshallLocationName" : "repositoryMetadata",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@param repositoryMetadata Information about the newly created repository.*/",
          "getterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@return Information about the newly created repository.*/",
          "fluentSetterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@param repositoryMetadata Information about the newly created repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>Information about the newly created repository.</p>\n@param repositoryMetadata Information about the newly created repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "InvalidContinuationTokenException" : {
      "c2jName" : "InvalidContinuationTokenException",
      "documentation" : "<p>The specified continuation token is not valid.</p>",
      "shapeName" : "InvalidContinuationTokenException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "invalidContinuationTokenException",
        "variableType" : "InvalidContinuationTokenException",
        "variableDeclarationType" : "InvalidContinuationTokenException",
        "documentation" : null,
        "simpleType" : "InvalidContinuationTokenException",
        "variableSetterType" : "InvalidContinuationTokenException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "InvalidContinuationTokenException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "ListRepositoriesRequest" : {
      "c2jName" : "ListRepositoriesInput",
      "documentation" : "<p>Represents the input of a list repositories operation.</p>",
      "shapeName" : "ListRepositoriesRequest",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
        "name" : "NextToken",
        "c2jName" : "nextToken",
        "c2jShape" : "NextToken",
        "variable" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "nextToken",
          "marshallLocationName" : "nextToken",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
        "getterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@return An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
        "fluentSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The criteria used to sort the results of a list repositories operation.</p>",
        "name" : "SortBy",
        "c2jName" : "sortBy",
        "c2jShape" : "SortByEnum",
        "variable" : {
          "variableName" : "sortBy",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The criteria used to sort the results of a list repositories operation.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "sortBy",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "sortBy",
          "marshallLocationName" : "sortBy",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : "SortByEnum",
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@param sortBy The criteria used to sort the results of a list repositories operation.\n@see SortByEnum*/",
        "getterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@return The criteria used to sort the results of a list repositories operation.\n@see SortByEnum*/",
        "fluentSetterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@param sortBy The criteria used to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see SortByEnum*/",
        "varargSetterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@param sortBy The criteria used to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see SortByEnum*/"
      }, {
        "documentation" : "<p>The order in which to sort the results of a list repositories operation.</p>",
        "name" : "Order",
        "c2jName" : "order",
        "c2jShape" : "OrderEnum",
        "variable" : {
          "variableName" : "order",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The order in which to sort the results of a list repositories operation.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "order",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "order",
          "marshallLocationName" : "order",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : "OrderEnum",
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@param order The order in which to sort the results of a list repositories operation.\n@see OrderEnum*/",
        "getterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@return The order in which to sort the results of a list repositories operation.\n@see OrderEnum*/",
        "fluentSetterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@param order The order in which to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see OrderEnum*/",
        "varargSetterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@param order The order in which to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see OrderEnum*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "listRepositoriesRequest",
        "variableType" : "ListRepositoriesRequest",
        "variableDeclarationType" : "ListRepositoriesRequest",
        "documentation" : null,
        "simpleType" : "ListRepositoriesRequest",
        "variableSetterType" : "ListRepositoriesRequest"
      },
      "marshaller" : {
        "action" : "ListRepositories",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.ListRepositories",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "NextToken" : {
          "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
          "name" : "NextToken",
          "c2jName" : "nextToken",
          "c2jShape" : "NextToken",
          "variable" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "nextToken",
            "marshallLocationName" : "nextToken",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
          "getterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@return An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.*/",
          "fluentSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.</p>\n@param nextToken An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "SortBy" : {
          "documentation" : "<p>The criteria used to sort the results of a list repositories operation.</p>",
          "name" : "SortBy",
          "c2jName" : "sortBy",
          "c2jShape" : "SortByEnum",
          "variable" : {
            "variableName" : "sortBy",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The criteria used to sort the results of a list repositories operation.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "sortBy",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "sortBy",
            "marshallLocationName" : "sortBy",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : "SortByEnum",
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@param sortBy The criteria used to sort the results of a list repositories operation.\n@see SortByEnum*/",
          "getterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@return The criteria used to sort the results of a list repositories operation.\n@see SortByEnum*/",
          "fluentSetterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@param sortBy The criteria used to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see SortByEnum*/",
          "varargSetterDocumentation" : "/**<p>The criteria used to sort the results of a list repositories operation.</p>\n@param sortBy The criteria used to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see SortByEnum*/"
        },
        "Order" : {
          "documentation" : "<p>The order in which to sort the results of a list repositories operation.</p>",
          "name" : "Order",
          "c2jName" : "order",
          "c2jShape" : "OrderEnum",
          "variable" : {
            "variableName" : "order",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The order in which to sort the results of a list repositories operation.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "order",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "order",
            "marshallLocationName" : "order",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : "OrderEnum",
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@param order The order in which to sort the results of a list repositories operation.\n@see OrderEnum*/",
          "getterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@return The order in which to sort the results of a list repositories operation.\n@see OrderEnum*/",
          "fluentSetterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@param order The order in which to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see OrderEnum*/",
          "varargSetterDocumentation" : "/**<p>The order in which to sort the results of a list repositories operation.</p>\n@param order The order in which to sort the results of a list repositories operation.\n@return Returns a reference to this object so that method calls can be chained together.\n@see OrderEnum*/"
        }
      }
    },
    "ListBranchesRequest" : {
      "c2jName" : "ListBranchesInput",
      "documentation" : "<p>Represents the input of a list branches operation.</p>",
      "shapeName" : "ListBranchesRequest",
      "deprecated" : false,
      "required" : [ "repositoryName" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the repository that contains the branches.</p>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the repository that contains the branches.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@param repositoryName The name of the repository that contains the branches.*/",
        "getterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@return The name of the repository that contains the branches.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@param repositoryName The name of the repository that contains the branches.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@param repositoryName The name of the repository that contains the branches.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>An enumeration token that allows the operation to batch the results. </p>",
        "name" : "NextToken",
        "c2jName" : "nextToken",
        "c2jShape" : "NextToken",
        "variable" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>An enumeration token that allows the operation to batch the results. </p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "nextToken",
          "marshallLocationName" : "nextToken",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@param nextToken An enumeration token that allows the operation to batch the results.*/",
        "getterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@return An enumeration token that allows the operation to batch the results.*/",
        "fluentSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@param nextToken An enumeration token that allows the operation to batch the results.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@param nextToken An enumeration token that allows the operation to batch the results.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "listBranchesRequest",
        "variableType" : "ListBranchesRequest",
        "variableDeclarationType" : "ListBranchesRequest",
        "documentation" : null,
        "simpleType" : "ListBranchesRequest",
        "variableSetterType" : "ListBranchesRequest"
      },
      "marshaller" : {
        "action" : "ListBranches",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.ListBranches",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryName" : {
          "documentation" : "<p>The name of the repository that contains the branches.</p>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the repository that contains the branches.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@param repositoryName The name of the repository that contains the branches.*/",
          "getterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@return The name of the repository that contains the branches.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@param repositoryName The name of the repository that contains the branches.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the repository that contains the branches.</p>\n@param repositoryName The name of the repository that contains the branches.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "NextToken" : {
          "documentation" : "<p>An enumeration token that allows the operation to batch the results. </p>",
          "name" : "NextToken",
          "c2jName" : "nextToken",
          "c2jShape" : "NextToken",
          "variable" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>An enumeration token that allows the operation to batch the results. </p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "nextToken",
            "marshallLocationName" : "nextToken",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@param nextToken An enumeration token that allows the operation to batch the results.*/",
          "getterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@return An enumeration token that allows the operation to batch the results.*/",
          "fluentSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@param nextToken An enumeration token that allows the operation to batch the results.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>An enumeration token that allows the operation to batch the results. </p>\n@param nextToken An enumeration token that allows the operation to batch the results.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "OrderEnum" : {
      "c2jName" : "OrderEnum",
      "documentation" : "",
      "shapeName" : "OrderEnum",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : [ {
        "name" : "Ascending",
        "value" : "ascending"
      }, {
        "name" : "Descending",
        "value" : "descending"
      } ],
      "variable" : {
        "variableName" : "orderEnum",
        "variableType" : "OrderEnum",
        "variableDeclarationType" : "OrderEnum",
        "documentation" : null,
        "simpleType" : "OrderEnum",
        "variableSetterType" : "OrderEnum"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "InvalidRepositoryDescriptionException" : {
      "c2jName" : "InvalidRepositoryDescriptionException",
      "documentation" : "<p>The specified repository description is not valid.</p>",
      "shapeName" : "InvalidRepositoryDescriptionException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "invalidRepositoryDescriptionException",
        "variableType" : "InvalidRepositoryDescriptionException",
        "variableDeclarationType" : "InvalidRepositoryDescriptionException",
        "documentation" : null,
        "simpleType" : "InvalidRepositoryDescriptionException",
        "variableSetterType" : "InvalidRepositoryDescriptionException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "InvalidRepositoryDescriptionException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "EncryptionIntegrityChecksFailedException" : {
      "c2jName" : "EncryptionIntegrityChecksFailedException",
      "documentation" : "<p>An encryption integrity check failed.</p>",
      "shapeName" : "EncryptionIntegrityChecksFailedException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "encryptionIntegrityChecksFailedException",
        "variableType" : "EncryptionIntegrityChecksFailedException",
        "variableDeclarationType" : "EncryptionIntegrityChecksFailedException",
        "documentation" : null,
        "simpleType" : "EncryptionIntegrityChecksFailedException",
        "variableSetterType" : "EncryptionIntegrityChecksFailedException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "EncryptionIntegrityChecksFailedException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "BranchNameRequiredException" : {
      "c2jName" : "BranchNameRequiredException",
      "documentation" : "<p>A branch name is required but was not specified.</p>",
      "shapeName" : "BranchNameRequiredException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "branchNameRequiredException",
        "variableType" : "BranchNameRequiredException",
        "variableDeclarationType" : "BranchNameRequiredException",
        "documentation" : null,
        "simpleType" : "BranchNameRequiredException",
        "variableSetterType" : "BranchNameRequiredException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "BranchNameRequiredException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "EncryptionKeyAccessDeniedException" : {
      "c2jName" : "EncryptionKeyAccessDeniedException",
      "documentation" : "<p>An encryption key could not be accessed.</p>",
      "shapeName" : "EncryptionKeyAccessDeniedException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "encryptionKeyAccessDeniedException",
        "variableType" : "EncryptionKeyAccessDeniedException",
        "variableDeclarationType" : "EncryptionKeyAccessDeniedException",
        "documentation" : null,
        "simpleType" : "EncryptionKeyAccessDeniedException",
        "variableSetterType" : "EncryptionKeyAccessDeniedException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "EncryptionKeyAccessDeniedException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "RepositoryNamesRequiredException" : {
      "c2jName" : "RepositoryNamesRequiredException",
      "documentation" : "<p>A repository names object is required but was not specified.</p>",
      "shapeName" : "RepositoryNamesRequiredException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "repositoryNamesRequiredException",
        "variableType" : "RepositoryNamesRequiredException",
        "variableDeclarationType" : "RepositoryNamesRequiredException",
        "documentation" : null,
        "simpleType" : "RepositoryNamesRequiredException",
        "variableSetterType" : "RepositoryNamesRequiredException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "RepositoryNamesRequiredException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "CommitDoesNotExistException" : {
      "c2jName" : "CommitDoesNotExistException",
      "documentation" : "<p>The specified commit does not exist or no commit was specified, and the specified repository has no default branch.</p>",
      "shapeName" : "CommitDoesNotExistException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "commitDoesNotExistException",
        "variableType" : "CommitDoesNotExistException",
        "variableDeclarationType" : "CommitDoesNotExistException",
        "documentation" : null,
        "simpleType" : "CommitDoesNotExistException",
        "variableSetterType" : "CommitDoesNotExistException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "CommitDoesNotExistException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "CreateRepositoryRequest" : {
      "c2jName" : "CreateRepositoryInput",
      "documentation" : "<p>Represents the input of a create repository operation.</p>",
      "shapeName" : "CreateRepositoryRequest",
      "deprecated" : false,
      "required" : [ "repositoryName" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@param repositoryName The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.*/",
        "getterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@return The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@param repositoryName The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@param repositoryName The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>A comment or description about the new repository.</p>",
        "name" : "RepositoryDescription",
        "c2jName" : "repositoryDescription",
        "c2jShape" : "RepositoryDescription",
        "variable" : {
          "variableName" : "repositoryDescription",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>A comment or description about the new repository.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryDescription",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryDescription",
          "marshallLocationName" : "repositoryDescription",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@param repositoryDescription A comment or description about the new repository.*/",
        "getterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@return A comment or description about the new repository.*/",
        "fluentSetterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@param repositoryDescription A comment or description about the new repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@param repositoryDescription A comment or description about the new repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "createRepositoryRequest",
        "variableType" : "CreateRepositoryRequest",
        "variableDeclarationType" : "CreateRepositoryRequest",
        "documentation" : null,
        "simpleType" : "CreateRepositoryRequest",
        "variableSetterType" : "CreateRepositoryRequest"
      },
      "marshaller" : {
        "action" : "CreateRepository",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.CreateRepository",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryDescription" : {
          "documentation" : "<p>A comment or description about the new repository.</p>",
          "name" : "RepositoryDescription",
          "c2jName" : "repositoryDescription",
          "c2jShape" : "RepositoryDescription",
          "variable" : {
            "variableName" : "repositoryDescription",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>A comment or description about the new repository.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryDescription",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryDescription",
            "marshallLocationName" : "repositoryDescription",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@param repositoryDescription A comment or description about the new repository.*/",
          "getterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@return A comment or description about the new repository.*/",
          "fluentSetterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@param repositoryDescription A comment or description about the new repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>A comment or description about the new repository.</p>\n@param repositoryDescription A comment or description about the new repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "RepositoryName" : {
          "documentation" : "<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@param repositoryName The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.*/",
          "getterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@return The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@param repositoryName The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.</note>\n@param repositoryName The name of the new repository to be created.</p> <note>The repository name must be unique across the calling AWS account. In addition, repository names are restricted to alphanumeric characters. The suffix \".git\" is prohibited.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "SortByEnum" : {
      "c2jName" : "SortByEnum",
      "documentation" : "",
      "shapeName" : "SortByEnum",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : [ {
        "name" : "RepositoryName",
        "value" : "repositoryName"
      }, {
        "name" : "LastModifiedDate",
        "value" : "lastModifiedDate"
      } ],
      "variable" : {
        "variableName" : "sortByEnum",
        "variableType" : "SortByEnum",
        "variableDeclarationType" : "SortByEnum",
        "documentation" : null,
        "simpleType" : "SortByEnum",
        "variableSetterType" : "SortByEnum"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "ListBranchesResult" : {
      "c2jName" : "ListBranchesOutput",
      "documentation" : "<p>Represents the output of a list branches operation.</p>",
      "shapeName" : "ListBranchesResult",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The list of branch names.</p>",
        "name" : "Branches",
        "c2jName" : "branches",
        "c2jShape" : "BranchNameList",
        "variable" : {
          "variableName" : "branches",
          "variableType" : "java.util.List<String>",
          "variableDeclarationType" : "java.util.List<String>",
          "documentation" : "<p>The list of branch names.</p>",
          "simpleType" : "List<String>",
          "variableSetterType" : "java.util.Collection<String>"
        },
        "setterModel" : {
          "variableName" : "branches",
          "variableType" : "java.util.List<String>",
          "variableDeclarationType" : "java.util.List<String>",
          "documentation" : "",
          "simpleType" : "List<String>",
          "variableSetterType" : "java.util.Collection<String>"
        },
        "getterModel" : {
          "returnType" : "java.util.List<String>",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "branches",
          "marshallLocationName" : "branches",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : {
          "memberType" : "String",
          "memberLocationName" : null,
          "implType" : "java.util.ArrayList",
          "interfaceType" : "java.util.List",
          "listMemberModel" : null,
          "memberAdditionalMarshallingPath" : null,
          "memberAdditionalUnmarshallingPath" : null,
          "simpleType" : "String",
          "simple" : true,
          "map" : false,
          "templateType" : "java.util.List<String>",
          "templateImplType" : "java.util.ArrayList<String>"
        },
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : true,
        "map" : false,
        "setterDocumentation" : "/**<p>The list of branch names.</p>\n@param branches The list of branch names.*/",
        "getterDocumentation" : "/**<p>The list of branch names.</p>\n@return The list of branch names.*/",
        "fluentSetterDocumentation" : "/**<p>The list of branch names.</p>\n@param branches The list of branch names.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The list of branch names.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setBranches(java.util.Collection)} or {@link #withBranches(java.util.Collection)} if you want to override the existing values.</p>\n@param branches The list of branch names.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>An enumeration token that returns the batch of the results. </p>",
        "name" : "NextToken",
        "c2jName" : "nextToken",
        "c2jShape" : "NextToken",
        "variable" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>An enumeration token that returns the batch of the results. </p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "nextToken",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "nextToken",
          "marshallLocationName" : "nextToken",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@param nextToken An enumeration token that returns the batch of the results.*/",
        "getterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@return An enumeration token that returns the batch of the results.*/",
        "fluentSetterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@param nextToken An enumeration token that returns the batch of the results.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@param nextToken An enumeration token that returns the batch of the results.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "listBranchesResult",
        "variableType" : "ListBranchesResult",
        "variableDeclarationType" : "ListBranchesResult",
        "documentation" : null,
        "simpleType" : "ListBranchesResult",
        "variableSetterType" : "ListBranchesResult"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "NextToken" : {
          "documentation" : "<p>An enumeration token that returns the batch of the results. </p>",
          "name" : "NextToken",
          "c2jName" : "nextToken",
          "c2jShape" : "NextToken",
          "variable" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>An enumeration token that returns the batch of the results. </p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "nextToken",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "nextToken",
            "marshallLocationName" : "nextToken",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@param nextToken An enumeration token that returns the batch of the results.*/",
          "getterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@return An enumeration token that returns the batch of the results.*/",
          "fluentSetterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@param nextToken An enumeration token that returns the batch of the results.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>An enumeration token that returns the batch of the results. </p>\n@param nextToken An enumeration token that returns the batch of the results.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "Branches" : {
          "documentation" : "<p>The list of branch names.</p>",
          "name" : "Branches",
          "c2jName" : "branches",
          "c2jShape" : "BranchNameList",
          "variable" : {
            "variableName" : "branches",
            "variableType" : "java.util.List<String>",
            "variableDeclarationType" : "java.util.List<String>",
            "documentation" : "<p>The list of branch names.</p>",
            "simpleType" : "List<String>",
            "variableSetterType" : "java.util.Collection<String>"
          },
          "setterModel" : {
            "variableName" : "branches",
            "variableType" : "java.util.List<String>",
            "variableDeclarationType" : "java.util.List<String>",
            "documentation" : "",
            "simpleType" : "List<String>",
            "variableSetterType" : "java.util.Collection<String>"
          },
          "getterModel" : {
            "returnType" : "java.util.List<String>",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "branches",
            "marshallLocationName" : "branches",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : {
            "memberType" : "String",
            "memberLocationName" : null,
            "implType" : "java.util.ArrayList",
            "interfaceType" : "java.util.List",
            "listMemberModel" : null,
            "memberAdditionalMarshallingPath" : null,
            "memberAdditionalUnmarshallingPath" : null,
            "simpleType" : "String",
            "simple" : true,
            "map" : false,
            "templateType" : "java.util.List<String>",
            "templateImplType" : "java.util.ArrayList<String>"
          },
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : true,
          "map" : false,
          "setterDocumentation" : "/**<p>The list of branch names.</p>\n@param branches The list of branch names.*/",
          "getterDocumentation" : "/**<p>The list of branch names.</p>\n@return The list of branch names.*/",
          "fluentSetterDocumentation" : "/**<p>The list of branch names.</p>\n@param branches The list of branch names.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The list of branch names.</p>\n<p><b>NOTE:</b> This method appends the values to the existing list (if any). Use {@link #setBranches(java.util.Collection)} or {@link #withBranches(java.util.Collection)} if you want to override the existing values.</p>\n@param branches The list of branch names.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "GetBranchResult" : {
      "c2jName" : "GetBranchOutput",
      "documentation" : "<p>Represents the output of a get branch operation.</p>",
      "shapeName" : "GetBranchResult",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the branch.</p>",
        "name" : "Branch",
        "c2jName" : "branch",
        "c2jShape" : "BranchInfo",
        "variable" : {
          "variableName" : "branch",
          "variableType" : "BranchInfo",
          "variableDeclarationType" : "BranchInfo",
          "documentation" : "<p>The name of the branch.</p>",
          "simpleType" : "BranchInfo",
          "variableSetterType" : "BranchInfo"
        },
        "setterModel" : {
          "variableName" : "branch",
          "variableType" : "BranchInfo",
          "variableDeclarationType" : "BranchInfo",
          "documentation" : "",
          "simpleType" : "BranchInfo",
          "variableSetterType" : "BranchInfo"
        },
        "getterModel" : {
          "returnType" : "BranchInfo",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "branch",
          "marshallLocationName" : "branch",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : false,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the branch.</p>\n@param branch The name of the branch.*/",
        "getterDocumentation" : "/**<p>The name of the branch.</p>\n@return The name of the branch.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branch The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branch The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "getBranchResult",
        "variableType" : "GetBranchResult",
        "variableDeclarationType" : "GetBranchResult",
        "documentation" : null,
        "simpleType" : "GetBranchResult",
        "variableSetterType" : "GetBranchResult"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "Branch" : {
          "documentation" : "<p>The name of the branch.</p>",
          "name" : "Branch",
          "c2jName" : "branch",
          "c2jShape" : "BranchInfo",
          "variable" : {
            "variableName" : "branch",
            "variableType" : "BranchInfo",
            "variableDeclarationType" : "BranchInfo",
            "documentation" : "<p>The name of the branch.</p>",
            "simpleType" : "BranchInfo",
            "variableSetterType" : "BranchInfo"
          },
          "setterModel" : {
            "variableName" : "branch",
            "variableType" : "BranchInfo",
            "variableDeclarationType" : "BranchInfo",
            "documentation" : "",
            "simpleType" : "BranchInfo",
            "variableSetterType" : "BranchInfo"
          },
          "getterModel" : {
            "returnType" : "BranchInfo",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "branch",
            "marshallLocationName" : "branch",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : false,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the branch.</p>\n@param branch The name of the branch.*/",
          "getterDocumentation" : "/**<p>The name of the branch.</p>\n@return The name of the branch.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branch The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the branch.</p>\n@param branch The name of the branch.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "RepositoryNameExistsException" : {
      "c2jName" : "RepositoryNameExistsException",
      "documentation" : "<p>The specified repository name already exists.</p>",
      "shapeName" : "RepositoryNameExistsException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "repositoryNameExistsException",
        "variableType" : "RepositoryNameExistsException",
        "variableDeclarationType" : "RepositoryNameExistsException",
        "documentation" : null,
        "simpleType" : "RepositoryNameExistsException",
        "variableSetterType" : "RepositoryNameExistsException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "RepositoryNameExistsException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "GetRepositoryRequest" : {
      "c2jName" : "GetRepositoryInput",
      "documentation" : "<p>Represents the input of a get repository operation.</p>",
      "shapeName" : "GetRepositoryRequest",
      "deprecated" : false,
      "required" : [ "repositoryName" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the repository to get information about.</p>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the repository to get information about.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@param repositoryName The name of the repository to get information about.*/",
        "getterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@return The name of the repository to get information about.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@param repositoryName The name of the repository to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@param repositoryName The name of the repository to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "getRepositoryRequest",
        "variableType" : "GetRepositoryRequest",
        "variableDeclarationType" : "GetRepositoryRequest",
        "documentation" : null,
        "simpleType" : "GetRepositoryRequest",
        "variableSetterType" : "GetRepositoryRequest"
      },
      "marshaller" : {
        "action" : "GetRepository",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.GetRepository",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryName" : {
          "documentation" : "<p>The name of the repository to get information about.</p>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the repository to get information about.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@param repositoryName The name of the repository to get information about.*/",
          "getterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@return The name of the repository to get information about.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@param repositoryName The name of the repository to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the repository to get information about.</p>\n@param repositoryName The name of the repository to get information about.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "InvalidOrderException" : {
      "c2jName" : "InvalidOrderException",
      "documentation" : "<p>The specified sort order is not valid.</p>",
      "shapeName" : "InvalidOrderException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "invalidOrderException",
        "variableType" : "InvalidOrderException",
        "variableDeclarationType" : "InvalidOrderException",
        "documentation" : null,
        "simpleType" : "InvalidOrderException",
        "variableSetterType" : "InvalidOrderException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "InvalidOrderException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "RepositoryLimitExceededException" : {
      "c2jName" : "RepositoryLimitExceededException",
      "documentation" : "<p>A repository resource limit was exceeded.</p>",
      "shapeName" : "RepositoryLimitExceededException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "repositoryLimitExceededException",
        "variableType" : "RepositoryLimitExceededException",
        "variableDeclarationType" : "RepositoryLimitExceededException",
        "documentation" : null,
        "simpleType" : "RepositoryLimitExceededException",
        "variableSetterType" : "RepositoryLimitExceededException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "RepositoryLimitExceededException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "UpdateRepositoryDescriptionRequest" : {
      "c2jName" : "UpdateRepositoryDescriptionInput",
      "documentation" : "<p>Represents the input of an update repository description operation.</p>",
      "shapeName" : "UpdateRepositoryDescriptionRequest",
      "deprecated" : false,
      "required" : [ "repositoryName" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the repository to set or change the comment or description for.</p>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the repository to set or change the comment or description for.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@param repositoryName The name of the repository to set or change the comment or description for.*/",
        "getterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@return The name of the repository to set or change the comment or description for.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@param repositoryName The name of the repository to set or change the comment or description for.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@param repositoryName The name of the repository to set or change the comment or description for.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The new comment or description for the specified repository.</p>",
        "name" : "RepositoryDescription",
        "c2jName" : "repositoryDescription",
        "c2jShape" : "RepositoryDescription",
        "variable" : {
          "variableName" : "repositoryDescription",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The new comment or description for the specified repository.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryDescription",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryDescription",
          "marshallLocationName" : "repositoryDescription",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@param repositoryDescription The new comment or description for the specified repository.*/",
        "getterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@return The new comment or description for the specified repository.*/",
        "fluentSetterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@param repositoryDescription The new comment or description for the specified repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@param repositoryDescription The new comment or description for the specified repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "updateRepositoryDescriptionRequest",
        "variableType" : "UpdateRepositoryDescriptionRequest",
        "variableDeclarationType" : "UpdateRepositoryDescriptionRequest",
        "documentation" : null,
        "simpleType" : "UpdateRepositoryDescriptionRequest",
        "variableSetterType" : "UpdateRepositoryDescriptionRequest"
      },
      "marshaller" : {
        "action" : "UpdateRepositoryDescription",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.UpdateRepositoryDescription",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryDescription" : {
          "documentation" : "<p>The new comment or description for the specified repository.</p>",
          "name" : "RepositoryDescription",
          "c2jName" : "repositoryDescription",
          "c2jShape" : "RepositoryDescription",
          "variable" : {
            "variableName" : "repositoryDescription",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The new comment or description for the specified repository.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryDescription",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryDescription",
            "marshallLocationName" : "repositoryDescription",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@param repositoryDescription The new comment or description for the specified repository.*/",
          "getterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@return The new comment or description for the specified repository.*/",
          "fluentSetterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@param repositoryDescription The new comment or description for the specified repository.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The new comment or description for the specified repository.</p>\n@param repositoryDescription The new comment or description for the specified repository.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "RepositoryName" : {
          "documentation" : "<p>The name of the repository to set or change the comment or description for.</p>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the repository to set or change the comment or description for.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@param repositoryName The name of the repository to set or change the comment or description for.*/",
          "getterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@return The name of the repository to set or change the comment or description for.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@param repositoryName The name of the repository to set or change the comment or description for.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the repository to set or change the comment or description for.</p>\n@param repositoryName The name of the repository to set or change the comment or description for.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "MaximumRepositoryNamesExceededException" : {
      "c2jName" : "MaximumRepositoryNamesExceededException",
      "documentation" : "<p>The maximum number of allowed repository names was exceeded. Currently, this number is 25.</p>",
      "shapeName" : "MaximumRepositoryNamesExceededException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "maximumRepositoryNamesExceededException",
        "variableType" : "MaximumRepositoryNamesExceededException",
        "variableDeclarationType" : "MaximumRepositoryNamesExceededException",
        "documentation" : null,
        "simpleType" : "MaximumRepositoryNamesExceededException",
        "variableSetterType" : "MaximumRepositoryNamesExceededException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "MaximumRepositoryNamesExceededException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "CommitIdRequiredException" : {
      "c2jName" : "CommitIdRequiredException",
      "documentation" : "<p>A commit ID was not specified.</p>",
      "shapeName" : "CommitIdRequiredException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "commitIdRequiredException",
        "variableType" : "CommitIdRequiredException",
        "variableDeclarationType" : "CommitIdRequiredException",
        "documentation" : null,
        "simpleType" : "CommitIdRequiredException",
        "variableSetterType" : "CommitIdRequiredException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "CommitIdRequiredException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "UpdateDefaultBranchRequest" : {
      "c2jName" : "UpdateDefaultBranchInput",
      "documentation" : "<p>Represents the input of an update default branch operation.</p>",
      "shapeName" : "UpdateDefaultBranchRequest",
      "deprecated" : false,
      "required" : [ "repositoryName", "defaultBranchName" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The name of the repository to set or change the default branch for.</p>",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the repository to set or change the default branch for.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@param repositoryName The name of the repository to set or change the default branch for.*/",
        "getterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@return The name of the repository to set or change the default branch for.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@param repositoryName The name of the repository to set or change the default branch for.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@param repositoryName The name of the repository to set or change the default branch for.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The name of the branch to set as the default.</p>",
        "name" : "DefaultBranchName",
        "c2jName" : "defaultBranchName",
        "c2jShape" : "BranchName",
        "variable" : {
          "variableName" : "defaultBranchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the branch to set as the default.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "defaultBranchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "defaultBranchName",
          "marshallLocationName" : "defaultBranchName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@param defaultBranchName The name of the branch to set as the default.*/",
        "getterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@return The name of the branch to set as the default.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@param defaultBranchName The name of the branch to set as the default.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@param defaultBranchName The name of the branch to set as the default.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "updateDefaultBranchRequest",
        "variableType" : "UpdateDefaultBranchRequest",
        "variableDeclarationType" : "UpdateDefaultBranchRequest",
        "documentation" : null,
        "simpleType" : "UpdateDefaultBranchRequest",
        "variableSetterType" : "UpdateDefaultBranchRequest"
      },
      "marshaller" : {
        "action" : "UpdateDefaultBranch",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.UpdateDefaultBranch",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryName" : {
          "documentation" : "<p>The name of the repository to set or change the default branch for.</p>",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the repository to set or change the default branch for.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@param repositoryName The name of the repository to set or change the default branch for.*/",
          "getterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@return The name of the repository to set or change the default branch for.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@param repositoryName The name of the repository to set or change the default branch for.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the repository to set or change the default branch for.</p>\n@param repositoryName The name of the repository to set or change the default branch for.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "DefaultBranchName" : {
          "documentation" : "<p>The name of the branch to set as the default.</p>",
          "name" : "DefaultBranchName",
          "c2jName" : "defaultBranchName",
          "c2jShape" : "BranchName",
          "variable" : {
            "variableName" : "defaultBranchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the branch to set as the default.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "defaultBranchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "defaultBranchName",
            "marshallLocationName" : "defaultBranchName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@param defaultBranchName The name of the branch to set as the default.*/",
          "getterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@return The name of the branch to set as the default.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@param defaultBranchName The name of the branch to set as the default.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the branch to set as the default.</p>\n@param defaultBranchName The name of the branch to set as the default.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "InvalidCommitIdException" : {
      "c2jName" : "InvalidCommitIdException",
      "documentation" : "<p>The specified commit ID is not valid.</p>",
      "shapeName" : "InvalidCommitIdException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "invalidCommitIdException",
        "variableType" : "InvalidCommitIdException",
        "variableDeclarationType" : "InvalidCommitIdException",
        "documentation" : null,
        "simpleType" : "InvalidCommitIdException",
        "variableSetterType" : "InvalidCommitIdException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "InvalidCommitIdException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "RepositoryNameIdPair" : {
      "c2jName" : "RepositoryNameIdPair",
      "documentation" : "<p>Information about a repository name and ID.</p>",
      "shapeName" : "RepositoryNameIdPair",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**\n@param repositoryName */",
        "getterDocumentation" : "/**\n@return */",
        "fluentSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The ID associated with the repository name.</p>",
        "name" : "RepositoryId",
        "c2jName" : "repositoryId",
        "c2jShape" : "RepositoryId",
        "variable" : {
          "variableName" : "repositoryId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The ID associated with the repository name.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryId",
          "marshallLocationName" : "repositoryId",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@param repositoryId The ID associated with the repository name.*/",
        "getterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@return The ID associated with the repository name.*/",
        "fluentSetterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@param repositoryId The ID associated with the repository name.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@param repositoryId The ID associated with the repository name.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "repositoryNameIdPair",
        "variableType" : "RepositoryNameIdPair",
        "variableDeclarationType" : "RepositoryNameIdPair",
        "documentation" : null,
        "simpleType" : "RepositoryNameIdPair",
        "variableSetterType" : "RepositoryNameIdPair"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryName" : {
          "documentation" : "",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**\n@param repositoryName */",
          "getterDocumentation" : "/**\n@return */",
          "fluentSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "RepositoryId" : {
          "documentation" : "<p>The ID associated with the repository name.</p>",
          "name" : "RepositoryId",
          "c2jName" : "repositoryId",
          "c2jShape" : "RepositoryId",
          "variable" : {
            "variableName" : "repositoryId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The ID associated with the repository name.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryId",
            "marshallLocationName" : "repositoryId",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@param repositoryId The ID associated with the repository name.*/",
          "getterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@return The ID associated with the repository name.*/",
          "fluentSetterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@param repositoryId The ID associated with the repository name.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The ID associated with the repository name.</p>\n@param repositoryId The ID associated with the repository name.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "RepositoryNameRequiredException" : {
      "c2jName" : "RepositoryNameRequiredException",
      "documentation" : "<p>A repository name is required but was not specified.</p>",
      "shapeName" : "RepositoryNameRequiredException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "repositoryNameRequiredException",
        "variableType" : "RepositoryNameRequiredException",
        "variableDeclarationType" : "RepositoryNameRequiredException",
        "documentation" : null,
        "simpleType" : "RepositoryNameRequiredException",
        "variableSetterType" : "RepositoryNameRequiredException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "RepositoryNameRequiredException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "EncryptionKeyUnavailableException" : {
      "c2jName" : "EncryptionKeyUnavailableException",
      "documentation" : "<p>The encryption key is not available.</p>",
      "shapeName" : "EncryptionKeyUnavailableException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "encryptionKeyUnavailableException",
        "variableType" : "EncryptionKeyUnavailableException",
        "variableDeclarationType" : "EncryptionKeyUnavailableException",
        "documentation" : null,
        "simpleType" : "EncryptionKeyUnavailableException",
        "variableSetterType" : "EncryptionKeyUnavailableException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "EncryptionKeyUnavailableException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "InvalidBranchNameException" : {
      "c2jName" : "InvalidBranchNameException",
      "documentation" : "<p>The specified branch name is not valid.</p>",
      "shapeName" : "InvalidBranchNameException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "invalidBranchNameException",
        "variableType" : "InvalidBranchNameException",
        "variableDeclarationType" : "InvalidBranchNameException",
        "documentation" : null,
        "simpleType" : "InvalidBranchNameException",
        "variableSetterType" : "InvalidBranchNameException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "InvalidBranchNameException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "GetBranchRequest" : {
      "c2jName" : "GetBranchInput",
      "documentation" : "<p>Represents the input of a get branch operation.</p>",
      "shapeName" : "GetBranchRequest",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "",
        "name" : "RepositoryName",
        "c2jName" : "repositoryName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryName",
          "marshallLocationName" : "repositoryName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**\n@param repositoryName */",
        "getterDocumentation" : "/**\n@return */",
        "fluentSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "<p>The name of the branch for which you want to retrieve information.</p>",
        "name" : "BranchName",
        "c2jName" : "branchName",
        "c2jShape" : "BranchName",
        "variable" : {
          "variableName" : "branchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The name of the branch for which you want to retrieve information.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "branchName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "branchName",
          "marshallLocationName" : "branchName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@param branchName The name of the branch for which you want to retrieve information.*/",
        "getterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@return The name of the branch for which you want to retrieve information.*/",
        "fluentSetterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@param branchName The name of the branch for which you want to retrieve information.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@param branchName The name of the branch for which you want to retrieve information.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "getBranchRequest",
        "variableType" : "GetBranchRequest",
        "variableDeclarationType" : "GetBranchRequest",
        "documentation" : null,
        "simpleType" : "GetBranchRequest",
        "variableSetterType" : "GetBranchRequest"
      },
      "marshaller" : {
        "action" : "GetBranch",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.GetBranch",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryName" : {
          "documentation" : "",
          "name" : "RepositoryName",
          "c2jName" : "repositoryName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryName",
            "marshallLocationName" : "repositoryName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**\n@param repositoryName */",
          "getterDocumentation" : "/**\n@return */",
          "fluentSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**\n@param repositoryName \n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "BranchName" : {
          "documentation" : "<p>The name of the branch for which you want to retrieve information.</p>",
          "name" : "BranchName",
          "c2jName" : "branchName",
          "c2jShape" : "BranchName",
          "variable" : {
            "variableName" : "branchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The name of the branch for which you want to retrieve information.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "branchName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "branchName",
            "marshallLocationName" : "branchName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@param branchName The name of the branch for which you want to retrieve information.*/",
          "getterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@return The name of the branch for which you want to retrieve information.*/",
          "fluentSetterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@param branchName The name of the branch for which you want to retrieve information.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The name of the branch for which you want to retrieve information.</p>\n@param branchName The name of the branch for which you want to retrieve information.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "BranchDoesNotExistException" : {
      "c2jName" : "BranchDoesNotExistException",
      "documentation" : "<p>The specified branch does not exist.</p>",
      "shapeName" : "BranchDoesNotExistException",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : null,
      "enums" : null,
      "variable" : {
        "variableName" : "branchDoesNotExistException",
        "variableType" : "BranchDoesNotExistException",
        "variableDeclarationType" : "BranchDoesNotExistException",
        "documentation" : null,
        "simpleType" : "BranchDoesNotExistException",
        "variableSetterType" : "BranchDoesNotExistException"
      },
      "marshaller" : null,
      "unmarshaller" : null,
      "errorCode" : "BranchDoesNotExistException",
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : { }
    },
    "UpdateRepositoryNameRequest" : {
      "c2jName" : "UpdateRepositoryNameInput",
      "documentation" : "<p>Represents the input of an update repository description operation.</p>",
      "shapeName" : "UpdateRepositoryNameRequest",
      "deprecated" : false,
      "required" : [ "oldName", "newName" ],
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "",
        "name" : "OldName",
        "c2jName" : "oldName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "oldName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "oldName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "oldName",
          "marshallLocationName" : "oldName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**\n@param oldName */",
        "getterDocumentation" : "/**\n@return */",
        "fluentSetterDocumentation" : "/**\n@param oldName \n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**\n@param oldName \n@return Returns a reference to this object so that method calls can be chained together.*/"
      }, {
        "documentation" : "",
        "name" : "NewName",
        "c2jName" : "newName",
        "c2jShape" : "RepositoryName",
        "variable" : {
          "variableName" : "newName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "newName",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "newName",
          "marshallLocationName" : "newName",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**\n@param newName */",
        "getterDocumentation" : "/**\n@return */",
        "fluentSetterDocumentation" : "/**\n@param newName \n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**\n@param newName \n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "updateRepositoryNameRequest",
        "variableType" : "UpdateRepositoryNameRequest",
        "variableDeclarationType" : "UpdateRepositoryNameRequest",
        "documentation" : null,
        "simpleType" : "UpdateRepositoryNameRequest",
        "variableSetterType" : "UpdateRepositoryNameRequest"
      },
      "marshaller" : {
        "action" : "UpdateRepositoryName",
        "verb" : "POST",
        "target" : "CodeCommit_20150413.UpdateRepositoryName",
        "requestUri" : "/",
        "locationName" : null,
        "xmlNameSpaceUri" : null
      },
      "unmarshaller" : null,
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "NewName" : {
          "documentation" : "",
          "name" : "NewName",
          "c2jName" : "newName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "newName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "newName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "newName",
            "marshallLocationName" : "newName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**\n@param newName */",
          "getterDocumentation" : "/**\n@return */",
          "fluentSetterDocumentation" : "/**\n@param newName \n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**\n@param newName \n@return Returns a reference to this object so that method calls can be chained together.*/"
        },
        "OldName" : {
          "documentation" : "",
          "name" : "OldName",
          "c2jName" : "oldName",
          "c2jShape" : "RepositoryName",
          "variable" : {
            "variableName" : "oldName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "oldName",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "oldName",
            "marshallLocationName" : "oldName",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**\n@param oldName */",
          "getterDocumentation" : "/**\n@return */",
          "fluentSetterDocumentation" : "/**\n@param oldName \n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**\n@param oldName \n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    },
    "DeleteRepositoryResult" : {
      "c2jName" : "DeleteRepositoryOutput",
      "documentation" : "<p>Represents the output of a delete repository operation.</p>",
      "shapeName" : "DeleteRepositoryResult",
      "deprecated" : false,
      "required" : null,
      "hasPayloadMember" : false,
      "hasHeaderMember" : false,
      "hasStatusCodeMember" : false,
      "hasStreamingMember" : false,
      "members" : [ {
        "documentation" : "<p>The ID of the repository that was deleted.</p>",
        "name" : "RepositoryId",
        "c2jName" : "repositoryId",
        "c2jShape" : "RepositoryId",
        "variable" : {
          "variableName" : "repositoryId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "<p>The ID of the repository that was deleted.</p>",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "setterModel" : {
          "variableName" : "repositoryId",
          "variableType" : "String",
          "variableDeclarationType" : "String",
          "documentation" : "",
          "simpleType" : "String",
          "variableSetterType" : "String"
        },
        "getterModel" : {
          "returnType" : "String",
          "documentation" : null
        },
        "http" : {
          "unmarshallLocationName" : "repositoryId",
          "marshallLocationName" : "repositoryId",
          "additionalUnmarshallingPath" : null,
          "additionalMarshallingPath" : null,
          "isPayload" : false,
          "isStreaming" : false,
          "location" : null,
          "flattened" : false,
          "header" : false,
          "uri" : false,
          "statusCode" : false,
          "queryString" : false
        },
        "deprecated" : false,
        "listModel" : null,
        "mapModel" : null,
        "enumType" : null,
        "xmlNameSpaceUri" : null,
        "simple" : true,
        "list" : false,
        "map" : false,
        "setterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@param repositoryId The ID of the repository that was deleted.*/",
        "getterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@return The ID of the repository that was deleted.*/",
        "fluentSetterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@param repositoryId The ID of the repository that was deleted.\n@return Returns a reference to this object so that method calls can be chained together.*/",
        "varargSetterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@param repositoryId The ID of the repository that was deleted.\n@return Returns a reference to this object so that method calls can be chained together.*/"
      } ],
      "enums" : null,
      "variable" : {
        "variableName" : "deleteRepositoryResult",
        "variableType" : "DeleteRepositoryResult",
        "variableDeclarationType" : "DeleteRepositoryResult",
        "documentation" : null,
        "simpleType" : "DeleteRepositoryResult",
        "variableSetterType" : "DeleteRepositoryResult"
      },
      "marshaller" : null,
      "unmarshaller" : {
        "resultWrapper" : null,
        "flattened" : false
      },
      "errorCode" : null,
      "customization" : {
        "artificialResultWrapper" : null,
        "skipGeneratingModelClass" : false,
        "skipGeneratingMarshaller" : false,
        "skipGeneratingUnmarshaller" : false
      },
      "membersAsMap" : {
        "RepositoryId" : {
          "documentation" : "<p>The ID of the repository that was deleted.</p>",
          "name" : "RepositoryId",
          "c2jName" : "repositoryId",
          "c2jShape" : "RepositoryId",
          "variable" : {
            "variableName" : "repositoryId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "<p>The ID of the repository that was deleted.</p>",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "setterModel" : {
            "variableName" : "repositoryId",
            "variableType" : "String",
            "variableDeclarationType" : "String",
            "documentation" : "",
            "simpleType" : "String",
            "variableSetterType" : "String"
          },
          "getterModel" : {
            "returnType" : "String",
            "documentation" : null
          },
          "http" : {
            "unmarshallLocationName" : "repositoryId",
            "marshallLocationName" : "repositoryId",
            "additionalUnmarshallingPath" : null,
            "additionalMarshallingPath" : null,
            "isPayload" : false,
            "isStreaming" : false,
            "location" : null,
            "flattened" : false,
            "header" : false,
            "uri" : false,
            "statusCode" : false,
            "queryString" : false
          },
          "deprecated" : false,
          "listModel" : null,
          "mapModel" : null,
          "enumType" : null,
          "xmlNameSpaceUri" : null,
          "simple" : true,
          "list" : false,
          "map" : false,
          "setterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@param repositoryId The ID of the repository that was deleted.*/",
          "getterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@return The ID of the repository that was deleted.*/",
          "fluentSetterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@param repositoryId The ID of the repository that was deleted.\n@return Returns a reference to this object so that method calls can be chained together.*/",
          "varargSetterDocumentation" : "/**<p>The ID of the repository that was deleted.</p>\n@param repositoryId The ID of the repository that was deleted.\n@return Returns a reference to this object so that method calls can be chained together.*/"
        }
      }
    }
  },
  "customizationConfig" : {
    "requestMetrics" : null,
    "useAutoConstructList" : false,
    "useAutoConstructMap" : false,
    "serviceClientHoldInputStream" : false,
    "operationsWithResponseStreamContentLengthValidation" : null,
    "customExceptionUnmarshallerImpl" : null,
    "customClientConfiguration" : null,
    "customResponseMetadataClassName" : null,
    "skipInterfaceAdditions" : false,
    "customServiceNameForRequest" : null,
    "requiredParamValidationEnabled" : false,
    "additionalShapeConstructors" : null,
    "simpleMethods" : null,
    "authPolicyActions" : null,
    "customCodeTemplates" : null,
    "operationModifiers" : null,
    "shapeSubstitutions" : null,
    "shapeModifiers" : null
  },
  "defaultClientConfiguration" : "com.amazonaws.PredefinedClientConfigurations.defaultConfig()"
}